{
  "swagger": "2.0",
  "info": {
    "title": "Forge Development System API",
    "description": "HTTP REST API for the Forge Development System - AI-driven software development framework",
    "version": "1.0.0",
    "contact": {
      "name": "Forge API Support",
      "url": "https://github.com/orchard9/forge9"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "tags": [
    {
      "name": "Health"
    },
    {
      "name": "ProjectService"
    },
    {
      "name": "TaskService"
    },
    {
      "name": "AgentService"
    },
    {
      "name": "GitService"
    },
    {
      "name": "FileUnderstandingService"
    },
    {
      "name": "DocumentAnalysisService"
    },
    {
      "name": "ReleaseService"
    },
    {
      "name": "ActivityService"
    },
    {
      "name": "FeatureService"
    },
    {
      "name": "DashboardService"
    }
  ],
  "host": "localhost:50052",
  "basePath": "/api/v1",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/activities": {
      "get": {
        "summary": "ListActivities retrieves activities based on filter criteria",
        "operationId": "ActivityService_ListActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListActivitiesResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "filter.projectId",
            "description": "Filter by project ID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.taskId",
            "description": "Filter by task ID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.agentId",
            "description": "Filter by agent ID",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.action",
            "description": "Filter by action type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.startTime",
            "description": "Filter activities after this timestamp",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.endTime",
            "description": "Filter activities before this timestamp",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "pageSize",
            "description": "Maximum number of activities to return (default: 100)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Page token for pagination",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldMask",
            "description": "Field mask to specify which fields to return",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ActivityService"
        ]
      }
    },
    "/api/v1/activities:recent": {
      "get": {
        "summary": "GetRecentActivities retrieves the most recent activities up to a specified limit",
        "operationId": "ActivityService_GetRecentActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRecentActivitiesResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Maximum number of recent activities to return (default: 50)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "projectId",
            "description": "Optional project ID to filter activities",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ActivityService"
        ]
      }
    },
    "/api/v1/agents": {
      "get": {
        "summary": "ListAgents retrieves all available agents with their workload information",
        "operationId": "AgentService_ListAgents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAgentsResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "specializationFilter",
            "description": "Optional: Filter by specialization/category",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeWorkload",
            "description": "Optional: Include workload metrics (default: true)",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortBy",
            "description": "Optional: Sort by \"workload\", \"name\", or \"availability\" (default: \"name\")",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "Pagination parameters",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldMask",
            "description": "Field mask to specify which fields to return",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/api/v1/agents/{persona}/context": {
      "get": {
        "summary": "GetAgentContext retrieves the context for a specific agent persona",
        "operationId": "AgentService_GetAgentContext",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAgentContextResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "persona",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AgentService"
        ]
      },
      "put": {
        "summary": "UpdateAgentContext updates the context for a specific agent persona",
        "operationId": "AgentService_UpdateAgentContext",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateAgentContextResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "persona",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "context": {
                  "$ref": "#/definitions/v1AgentContext"
                }
              },
              "title": "Request message for UpdateAgentContext"
            }
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/api/v1/audits/{auditId}": {
      "get": {
        "summary": "GetAuditRequest retrieves a specific audit request",
        "operationId": "ProjectService_GetAuditRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAuditRequestResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "auditId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/audits/{auditId}/process": {
      "post": {
        "summary": "ProcessAuditResults processes completed audit results and creates tasks",
        "operationId": "ProjectService_ProcessAuditResults",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ProcessAuditResultsResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "auditId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "processingLogContent": {
                  "type": "string",
                  "format": "byte",
                  "title": "Processing log markdown content"
                },
                "processorId": {
                  "type": "string",
                  "title": "ID of the agent processing the audit"
                }
              },
              "title": "Request message for ProcessAuditResults"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/audits/{auditId}/results": {
      "post": {
        "summary": "SubmitAuditResults submits audit deliverables and transitions to completed",
        "operationId": "ProjectService_SubmitAuditResults",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SubmitAuditResultsResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "auditId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "auditorId": {
                  "type": "string"
                },
                "guidelinesContent": {
                  "type": "string",
                  "format": "byte",
                  "title": "File content as bytes for gRPC upload"
                },
                "checklistContent": {
                  "type": "string",
                  "format": "byte"
                },
                "resultsContent": {
                  "type": "string",
                  "format": "byte"
                },
                "metadata": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "title": "Optional metadata for the submission"
                }
              },
              "title": "Request message for SubmitAuditResults"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/audits/{auditId}/status": {
      "put": {
        "summary": "UpdateAuditStatus updates the status of an audit request",
        "operationId": "ProjectService_UpdateAuditStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateAuditStatusResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "auditId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "newStatus": {
                  "$ref": "#/definitions/v1RequestStatus"
                },
                "auditorId": {
                  "type": "string"
                },
                "comment": {
                  "type": "string"
                }
              },
              "title": "Request message for UpdateAuditStatus"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/docker/containers": {
      "get": {
        "operationId": "ReleaseService_ListReleaseContainers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListReleaseContainersResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "pageSize",
            "description": "Pagination parameters",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldMask",
            "description": "Field mask to specify which fields to return",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ReleaseService"
        ]
      }
    },
    "/api/v1/docker/containers:build": {
      "post": {
        "operationId": "ReleaseService_BuildReleaseContainer",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1BuildReleaseContainerResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1BuildReleaseContainerResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BuildReleaseContainerRequest"
            }
          }
        ],
        "tags": [
          "ReleaseService"
        ]
      }
    },
    "/api/v1/docker/containers:publish": {
      "post": {
        "operationId": "ReleaseService_PublishReleaseContainer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PublishReleaseContainerResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PublishReleaseContainerRequest"
            }
          }
        ],
        "tags": [
          "ReleaseService"
        ]
      }
    },
    "/api/v1/docker/containers:validate": {
      "post": {
        "operationId": "ReleaseService_ValidateReleaseContainer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ValidateReleaseContainerResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ValidateReleaseContainerRequest"
            }
          }
        ],
        "tags": [
          "ReleaseService"
        ]
      }
    },
    "/api/v1/docker/status": {
      "get": {
        "summary": "Docker protocol methods",
        "operationId": "ReleaseService_GetDockerStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDockerStatusResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ReleaseService"
        ]
      }
    },
    "/api/v1/documents/analysis/{analysisId}/status": {
      "get": {
        "summary": "GetAnalysisStatus retrieves the status of a previously submitted analysis.",
        "operationId": "DocumentAnalysisService_GetAnalysisStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AnalysisStatusResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "analysisId",
            "description": "Analysis identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DocumentAnalysisService"
        ]
      }
    },
    "/api/v1/documents:analyze": {
      "post": {
        "summary": "AnalyzeDocuments processes submitted documents using AI to determine\nwhich onboarding questions are answered by the provided content.",
        "operationId": "DocumentAnalysisService_AnalyzeDocuments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AnalysisResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "AnalyzeDocumentsRequest contains documents and configuration for analysis.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AnalyzeDocumentsRequest"
            }
          }
        ],
        "tags": [
          "DocumentAnalysisService"
        ]
      }
    },
    "/api/v1/features": {
      "get": {
        "summary": "ListFeatures retrieves features with optional filtering",
        "operationId": "FeatureService_ListFeatures",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListFeaturesResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "releaseVersion",
            "description": "Optional: Filter by release version",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "category",
            "description": "Optional: Filter by category",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags",
            "description": "Optional: Filter by tags (must have all tags)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "minPriority",
            "description": "Optional: Minimum priority filter",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeProgress",
            "description": "Optional: Include progress calculation (default: true)",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageSize",
            "description": "Pagination parameters",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldMask",
            "description": "Field mask for response optimization",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FeatureService"
        ]
      },
      "post": {
        "summary": "CreateFeature creates a new feature group",
        "operationId": "FeatureService_CreateFeature",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateFeatureResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateFeatureRequest"
            }
          }
        ],
        "tags": [
          "FeatureService"
        ]
      }
    },
    "/api/v1/features/{featureId}/tasks": {
      "get": {
        "summary": "GetFeatureTasks retrieves all tasks associated with a feature",
        "operationId": "FeatureService_GetFeatureTasks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetFeatureTasksResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "featureId",
            "description": "Required: Feature ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "statusFilter",
            "description": "Optional: Filter tasks by status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeDetails",
            "description": "Optional: Include full task details (default: false)",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "FeatureService"
        ]
      }
    },
    "/api/v1/features/{id}": {
      "get": {
        "summary": "GetFeature retrieves a specific feature by ID",
        "operationId": "FeatureService_GetFeature",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetFeatureResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Required: Feature ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "FeatureService"
        ]
      },
      "delete": {
        "summary": "DeleteFeature removes a feature (administrative use only)",
        "operationId": "FeatureService_DeleteFeature",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteFeatureResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Required: Feature ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "force",
            "description": "Optional: Force deletion even if tasks are associated",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "FeatureService"
        ]
      },
      "put": {
        "summary": "UpdateFeature updates an existing feature",
        "operationId": "FeatureService_UpdateFeature",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateFeatureResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Required: Feature ID to update",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "title": "Optional: New name"
                },
                "description": {
                  "type": "string",
                  "title": "Optional: New description"
                },
                "category": {
                  "type": "string",
                  "title": "Optional: New category"
                },
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "Optional: New tags (replaces existing)"
                },
                "priority": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Optional: New priority"
                },
                "taskIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "Optional: New task IDs (replaces existing)"
                }
              }
            }
          }
        ],
        "tags": [
          "FeatureService"
        ]
      }
    },
    "/api/v1/git/hooks:postCheckout": {
      "post": {
        "operationId": "GitService_HandlePostCheckoutHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1HandlePostCheckoutHookResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1HandlePostCheckoutHookRequest"
            }
          }
        ],
        "tags": [
          "GitService"
        ]
      }
    },
    "/api/v1/git/hooks:postMerge": {
      "post": {
        "summary": "Hook integration",
        "operationId": "GitService_HandlePostMergeHook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1HandlePostMergeHookResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1HandlePostMergeHookRequest"
            }
          }
        ],
        "tags": [
          "GitService"
        ]
      }
    },
    "/api/v1/git/pullRequests/release": {
      "post": {
        "operationId": "GitService_CreateReleasePullRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateReleasePullRequestResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateReleasePullRequestRequest"
            }
          }
        ],
        "tags": [
          "GitService"
        ]
      }
    },
    "/api/v1/git/pullRequests/task": {
      "post": {
        "summary": "Pull request operations",
        "operationId": "GitService_CreateTaskPullRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateTaskPullRequestResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateTaskPullRequestRequest"
            }
          }
        ],
        "tags": [
          "GitService"
        ]
      }
    },
    "/api/v1/git/pullRequests/{branchName}": {
      "get": {
        "operationId": "GitService_GetPullRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPullRequestResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "branchName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GitService"
        ]
      }
    },
    "/api/v1/git/releaseBranches": {
      "post": {
        "summary": "Release branch operations",
        "operationId": "GitService_CreateReleaseBranch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateReleaseBranchResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateReleaseBranchRequest"
            }
          }
        ],
        "tags": [
          "GitService"
        ]
      }
    },
    "/api/v1/git/releaseBranches/{version}": {
      "get": {
        "operationId": "GitService_GetReleaseBranch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetReleaseBranchResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GitService"
        ]
      }
    },
    "/api/v1/git/taskBranches": {
      "post": {
        "summary": "Task branch operations",
        "operationId": "GitService_CreateTaskBranch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateTaskBranchResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateTaskBranchRequest"
            }
          }
        ],
        "tags": [
          "GitService"
        ]
      }
    },
    "/api/v1/git/taskBranches/{taskId}": {
      "get": {
        "operationId": "GitService_GetTaskBranch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTaskBranchResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "GitService"
        ]
      }
    },
    "/api/v1/health": {
      "get": {
        "summary": "Check provides application health status",
        "operationId": "Health_Check",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/healthHealthCheckResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "service",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Health"
        ]
      }
    },
    "/api/v1/health/watch": {
      "get": {
        "summary": "Watch streams health status changes",
        "operationId": "Health_Watch",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/healthHealthCheckResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of healthHealthCheckResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "service",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Health"
        ]
      }
    },
    "/api/v1/personas": {
      "get": {
        "summary": "ListPersonas retrieves all available personas in the system",
        "operationId": "AgentService_ListPersonas",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPersonasResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Pagination parameters",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldMask",
            "description": "Field mask to specify which fields to return",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AgentService"
        ]
      }
    },
    "/api/v1/projectTypes": {
      "get": {
        "summary": "GetProjectTypes returns supported project types and languages",
        "operationId": "ProjectService_GetProjectTypes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProjectTypesResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/projectTypes/{projectType}/questions": {
      "get": {
        "summary": "GetProjectQuestions returns questions based on project type",
        "operationId": "ProjectService_GetProjectQuestions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProjectQuestionsResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectType",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "language",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/projects": {
      "get": {
        "summary": "ListProjects returns a paginated list of all projects",
        "operationId": "ProjectService_ListProjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProjectsResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageSize",
            "description": "Pagination parameters",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statusFilter",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "STATUS_UNSPECIFIED",
              "ACTIVE",
              "ARCHIVED"
            ],
            "default": "STATUS_UNSPECIFIED"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_UNSPECIFIED",
              "NAME",
              "CREATED_DATE",
              "LAST_MODIFIED"
            ],
            "default": "SORT_UNSPECIFIED"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ORDER_UNSPECIFIED",
              "ASCENDING",
              "DESCENDING"
            ],
            "default": "ORDER_UNSPECIFIED"
          },
          {
            "name": "fieldMask",
            "description": "Field mask for response optimization",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/projects/info": {
      "put": {
        "summary": "UpdateProjectInfo updates only mutable fields (name and description)",
        "operationId": "ProjectService_UpdateProjectInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateProjectInfoResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateProjectInfoRequest"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/projects/metadata": {
      "get": {
        "summary": "GetProjectMetadata retrieves project metadata",
        "operationId": "ProjectService_GetProjectMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProjectMetadataResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ProjectService"
        ]
      },
      "put": {
        "summary": "UpdateProjectMetadata initializes or updates project metadata",
        "operationId": "ProjectService_UpdateProjectMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateProjectMetadataResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateProjectMetadataRequest"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/projects/{project.id}": {
      "put": {
        "summary": "UpdateProject updates project information",
        "operationId": "ProjectService_UpdateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateProjectResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "project.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project represents a Forge project",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "currentVersion": {
                  "type": "string"
                },
                "versions": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time"
                }
              },
              "title": "Project represents a Forge project"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/projects/{projectId}": {
      "get": {
        "summary": "GetProject retrieves project information",
        "operationId": "ProjectService_GetProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProjectResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/projects/{projectId}/answers": {
      "post": {
        "summary": "StoreProjectAnswers stores question answers for a project",
        "operationId": "ProjectService_StoreProjectAnswers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StoreProjectAnswersResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "answers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/v1Answer"
                  }
                }
              },
              "title": "Request message for StoreProjectAnswers"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/projects/{projectId}/audits": {
      "get": {
        "summary": "ListAudits returns a list of audit requests with filtering support",
        "operationId": "ProjectService_ListAudits",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAuditsResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Filter by version",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "Filter by status\n\n - REQUESTED: Initial state when request is created\n - REVIEWING: Request is being reviewed/worked on\n - COMPLETED: Request work is complete, deliverables submitted\n - PROCESSED: Request has been processed and incorporated",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "REQUEST_STATUS_UNSPECIFIED",
              "REQUESTED",
              "REVIEWING",
              "COMPLETED",
              "PROCESSED"
            ],
            "default": "REQUEST_STATUS_UNSPECIFIED"
          },
          {
            "name": "limit",
            "description": "Pagination limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Pagination token",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      },
      "post": {
        "summary": "CreateAuditRequest creates a new audit request for a project",
        "operationId": "ProjectService_CreateAuditRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateAuditRequestResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                },
                "metadata": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "title": "Request message for CreateAuditRequest"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/projects/{projectId}/dashboard": {
      "get": {
        "summary": "GetDashboardData returns all data needed for the dashboard in a single request",
        "operationId": "DashboardService_GetDashboardData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDashboardDataResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "description": "Project ID to get dashboard data for",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sections",
            "description": "Specific sections to include (empty = all)\n\n - DASHBOARD_SECTION_PROJECT_STATS: Project statistics and metrics\n - DASHBOARD_SECTION_RECENT_ACTIVITIES: Recent activity feed\n - DASHBOARD_SECTION_CURRENT_TASKS: Current active tasks\n - DASHBOARD_SECTION_RELEASE_SUMMARY: Release progress and summary\n - DASHBOARD_SECTION_ACTIVE_AGENTS: Currently active AI agents\n - DASHBOARD_SECTION_TASK_DISTRIBUTION: Task distribution by status/persona\n - DASHBOARD_SECTION_PERFORMANCE_METRICS: System performance metrics",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "DASHBOARD_SECTION_UNSPECIFIED",
                "DASHBOARD_SECTION_PROJECT_STATS",
                "DASHBOARD_SECTION_RECENT_ACTIVITIES",
                "DASHBOARD_SECTION_CURRENT_TASKS",
                "DASHBOARD_SECTION_RELEASE_SUMMARY",
                "DASHBOARD_SECTION_ACTIVE_AGENTS",
                "DASHBOARD_SECTION_TASK_DISTRIBUTION",
                "DASHBOARD_SECTION_PERFORMANCE_METRICS"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "useCache",
            "description": "Whether to use cached data",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "maxRecentActivities",
            "description": "Max number of recent activities (default 10)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxCurrentTasks",
            "description": "Max number of current tasks (default 20)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "DashboardService"
        ]
      }
    },
    "/api/v1/projects/{projectId}/requirements": {
      "get": {
        "summary": "ListRequirements returns a list of requirement requests with filtering support",
        "operationId": "ProjectService_ListRequirements",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRequirementsResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Filter by version",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "Filter by status\n\n - REQUESTED: Initial state when request is created\n - REVIEWING: Request is being reviewed/worked on\n - COMPLETED: Request work is complete, deliverables submitted\n - PROCESSED: Request has been processed and incorporated",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "REQUEST_STATUS_UNSPECIFIED",
              "REQUESTED",
              "REVIEWING",
              "COMPLETED",
              "PROCESSED"
            ],
            "default": "REQUEST_STATUS_UNSPECIFIED"
          },
          {
            "name": "limit",
            "description": "Pagination limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Pagination token",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      },
      "post": {
        "summary": "CreateRequirementRequest creates a new requirement request for a project",
        "operationId": "ProjectService_CreateRequirementRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateRequirementRequestResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                },
                "metadata": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "title": "Request message for CreateRequirementRequest"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/projects/{projectId}/research": {
      "get": {
        "summary": "ListResearch returns a list of research requests with filtering support",
        "operationId": "ProjectService_ListResearch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListResearchResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Filter by version",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "description": "Filter by status\n\n - REQUESTED: Initial state when request is created\n - REVIEWING: Request is being reviewed/worked on\n - COMPLETED: Request work is complete, deliverables submitted\n - PROCESSED: Request has been processed and incorporated",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "REQUEST_STATUS_UNSPECIFIED",
              "REQUESTED",
              "REVIEWING",
              "COMPLETED",
              "PROCESSED"
            ],
            "default": "REQUEST_STATUS_UNSPECIFIED"
          },
          {
            "name": "limit",
            "description": "Pagination limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "Pagination token",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      },
      "post": {
        "summary": "CreateResearchRequest creates a new research request for a project",
        "operationId": "ProjectService_CreateResearchRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateResearchRequestResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                },
                "metadata": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "title": "Request message for CreateResearchRequest"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/projects/{projectId}/stats": {
      "get": {
        "summary": "GetProjectStats returns project-wide statistics and metrics",
        "operationId": "ProjectService_GetProjectStats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetProjectStatsResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeCache",
            "description": "Whether to use cached results",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/projects/{projectId}/understanding": {
      "get": {
        "summary": "List all file understandings for a project",
        "operationId": "FileUnderstandingService_ListProjectUnderstanding",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProjectUnderstandingResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filePatterns",
            "description": "Filter by file patterns",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "languages",
            "description": "Filter by programming languages",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "includeStale",
            "description": "Include files that need re-analysis",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "pageSize",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldMask",
            "description": "Field mask to specify which fields to return",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "FileUnderstandingService"
        ]
      }
    },
    "/api/v1/projects/{projectId}/understanding/files": {
      "get": {
        "summary": "Get understanding for a specific file",
        "operationId": "FileUnderstandingService_GetFileUnderstanding",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetFileUnderstandingResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "forceRefresh",
            "description": "Force re-analysis even if cached",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "FileUnderstandingService"
        ]
      }
    },
    "/api/v1/projects/{projectId}/understanding/status": {
      "get": {
        "summary": "Get current understanding status for a project",
        "operationId": "FileUnderstandingService_GetUnderstandingStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUnderstandingStatusResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "FileUnderstandingService"
        ]
      }
    },
    "/api/v1/projects/{projectId}/understanding:analyze": {
      "post": {
        "summary": "Analyze project files to create AI-powered summaries with streaming progress",
        "operationId": "FileUnderstandingService_AnalyzeProjectFiles",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1AnalyzeProjectFilesResponse"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1AnalyzeProjectFilesResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "strategy": {
                  "$ref": "#/definitions/v1UnderstandingStrategy"
                },
                "includePatterns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "File patterns to include (e.g., \"*.go\", \"internal/**\")"
                },
                "excludePatterns": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "File patterns to exclude (e.g., \"**_test.go\")"
                },
                "includeTests": {
                  "type": "boolean",
                  "title": "Whether to include test files"
                },
                "maxConcurrent": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Max concurrent analysis operations"
                }
              },
              "title": "File understanding analysis request"
            }
          }
        ],
        "tags": [
          "FileUnderstandingService"
        ]
      }
    },
    "/api/v1/projects/{projectId}:regenerateIndices": {
      "post": {
        "summary": "RegenerateIndices rebuilds all index files",
        "operationId": "ProjectService_RegenerateIndices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RegenerateIndicesResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Request message for RegenerateIndices"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/projects/{projectId}:repair": {
      "post": {
        "summary": "RepairProjectStructure repairs missing directories and files in the project structure",
        "operationId": "ProjectService_RepairProjectStructure",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RepairProjectStructureResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "createMissingFiles": {
                  "type": "boolean",
                  "title": "Whether to create missing files"
                },
                "repairInvalidFiles": {
                  "type": "boolean",
                  "title": "Whether to repair invalid files"
                }
              },
              "title": "Request message for RepairProjectStructure"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/projects/{projectId}:understand": {
      "post": {
        "summary": "UnderstandProject analyzes a project and provides streaming progress updates",
        "operationId": "ProjectService_UnderstandProject",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1UnderstandProjectProgress"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of v1UnderstandProjectProgress"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "includeFileContents": {
                  "type": "boolean"
                }
              },
              "title": "Request message for UnderstandProject"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/projects/{projectId}:validate": {
      "get": {
        "summary": "ValidateProjectStructure checks if the project structure is valid and complete",
        "operationId": "ProjectService_ValidateProjectStructure",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ValidateProjectStructureResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/projects:scaffold": {
      "post": {
        "summary": "ScaffoldProject creates a new project with the initial directory structure",
        "operationId": "ProjectService_ScaffoldProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ScaffoldProjectResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ScaffoldProjectRequest"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/releases": {
      "get": {
        "summary": "Release management methods",
        "operationId": "ReleaseService_ListReleases",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListReleasesResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "Pagination parameters",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldMask",
            "description": "Field mask to specify which fields to return",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ReleaseService"
        ]
      }
    },
    "/api/v1/releases/{version}/progress": {
      "get": {
        "operationId": "ReleaseService_GetReleaseProgress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetReleaseProgressResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ReleaseService"
        ]
      }
    },
    "/api/v1/requirements/{requirementId}": {
      "get": {
        "summary": "GetRequirementRequest retrieves a specific requirement request",
        "operationId": "ProjectService_GetRequirementRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetRequirementRequestResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "requirementId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/requirements/{requirementId}/process": {
      "post": {
        "summary": "ProcessRequirementResults processes completed requirement results",
        "operationId": "ProjectService_ProcessRequirementResults",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ProcessRequirementResultsResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "requirementId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "processingLogContent": {
                  "type": "string",
                  "format": "byte",
                  "title": "Processing log markdown content"
                },
                "processorId": {
                  "type": "string",
                  "title": "ID of the agent processing the requirement"
                }
              },
              "title": "Request message for ProcessRequirementResults"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/requirements/{requirementId}/results": {
      "post": {
        "summary": "SubmitRequirementResults submits requirement deliverables and transitions to completed",
        "operationId": "ProjectService_SubmitRequirementResults",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SubmitRequirementResultsResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "requirementId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "analystId": {
                  "type": "string"
                },
                "specContent": {
                  "type": "string",
                  "format": "byte",
                  "title": "Specification markdown content"
                },
                "clarificationsContent": {
                  "type": "string",
                  "format": "byte",
                  "title": "Clarifications markdown content"
                }
              },
              "title": "Request message for SubmitRequirementResults"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/requirements/{requirementId}/status": {
      "put": {
        "summary": "UpdateRequirementStatus updates the status of a requirement request",
        "operationId": "ProjectService_UpdateRequirementStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateRequirementStatusResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "requirementId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "newStatus": {
                  "$ref": "#/definitions/v1RequestStatus"
                },
                "analystId": {
                  "type": "string"
                },
                "comment": {
                  "type": "string"
                }
              },
              "title": "Request message for UpdateRequirementStatus"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/research/{researchId}": {
      "get": {
        "summary": "GetResearchRequest retrieves a specific research request",
        "operationId": "ProjectService_GetResearchRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetResearchRequestResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "researchId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/research/{researchId}/process": {
      "post": {
        "summary": "ProcessResearchResults processes completed research results",
        "operationId": "ProjectService_ProcessResearchResults",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ProcessResearchResultsResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "researchId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "processingLogContent": {
                  "type": "string",
                  "format": "byte",
                  "title": "Processing log markdown content"
                },
                "processorId": {
                  "type": "string",
                  "title": "ID of the agent processing the research"
                }
              },
              "title": "Request message for ProcessResearchResults"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/research/{researchId}/results": {
      "post": {
        "summary": "SubmitResearchResults submits research deliverables and transitions to completed",
        "operationId": "ProjectService_SubmitResearchResults",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SubmitResearchResultsResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "researchId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "researcherId": {
                  "type": "string"
                },
                "findingsContent": {
                  "type": "string",
                  "format": "byte",
                  "title": "Findings markdown content"
                },
                "recommendationsContent": {
                  "type": "string",
                  "format": "byte",
                  "title": "Recommendations markdown content"
                }
              },
              "title": "Request message for SubmitResearchResults"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/research/{researchId}/status": {
      "put": {
        "summary": "UpdateResearchStatus updates the status of a research request",
        "operationId": "ProjectService_UpdateResearchStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateResearchStatusResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "researchId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "newStatus": {
                  "$ref": "#/definitions/v1RequestStatus"
                },
                "researcherId": {
                  "type": "string"
                },
                "comment": {
                  "type": "string"
                }
              },
              "title": "Request message for UpdateResearchStatus"
            }
          }
        ],
        "tags": [
          "ProjectService"
        ]
      }
    },
    "/api/v1/simulations": {
      "get": {
        "summary": "Simulation management methods",
        "operationId": "ReleaseService_ListSimulations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSimulationsResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statusFilter",
            "description": "\"passed\", \"failed\", \"running\", \"all\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "Pagination parameters",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldMask",
            "description": "Field mask to specify which fields to return",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ReleaseService"
        ]
      }
    },
    "/api/v1/simulations/{simulationName}/history": {
      "get": {
        "operationId": "ReleaseService_GetSimulationHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSimulationHistoryResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "simulationName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Optional - if empty, returns history across all versions",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Maximum number of historical runs to return",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "ReleaseService"
        ]
      }
    },
    "/api/v1/tasks": {
      "get": {
        "summary": "List tasks",
        "description": "Retrieve a paginated list of tasks with optional filtering by status, persona, version, and confidence score",
        "operationId": "listTasks",
        "responses": {
          "200": {
            "description": "List of tasks retrieved successfully",
            "schema": {
              "$ref": "#/definitions/v1ListTasksResponse"
            },
            "examples": {
              "application/json": {
                "tasks": [
                  {
                    "id": "task-123",
                    "title": "Example task",
                    "status": "todo",
                    "persona": "principal-developer",
                    "confidence_score": 80,
                    "version": "1.0.0"
                  }
                ],
                "next_page_token": "",
                "total_count": 1,
                "status": {
                  "success": true
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "persona",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "minConfidenceScore",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "componentType",
            "description": "Filter by component type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "COMPONENT_TYPE_UNSPECIFIED",
              "COMPONENT_TYPE_FRONTEND",
              "COMPONENT_TYPE_BACKEND",
              "COMPONENT_TYPE_DATABASE",
              "COMPONENT_TYPE_API",
              "COMPONENT_TYPE_INFRASTRUCTURE"
            ],
            "default": "COMPONENT_TYPE_UNSPECIFIED"
          },
          {
            "name": "pageSize",
            "description": "Pagination parameters",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fieldMask",
            "description": "Field mask for response optimization",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Tasks"
        ]
      },
      "post": {
        "summary": "CreateTask creates a fully specified task\nAllows creating a task with all fields explicitly defined",
        "operationId": "TaskService_CreateTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateTaskResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "task",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Task"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/v1/tasks/cycles": {
      "get": {
        "summary": "DetectCycles finds all dependency cycles in the current task graph\nReturns detailed information about each cycle found",
        "operationId": "TaskService_DetectCycles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DetectCyclesResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "projectId",
            "description": "Optional: filter by project",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Optional: filter by version",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/v1/tasks/{task.id}": {
      "put": {
        "summary": "UpdateTask updates a task's content\nModifies task fields but doesn't change status",
        "operationId": "TaskService_UpdateTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateTaskResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "task.id",
            "description": "Core metadata",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "task",
            "description": "Task represents a unit of work in the Forge system",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "version": {
                  "type": "string"
                },
                "persona": {
                  "type": "string"
                },
                "confidenceScore": {
                  "type": "integer",
                  "format": "int32"
                },
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "dependencies": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "title": "Relationships"
                },
                "definition": {
                  "type": "string",
                  "title": "Content"
                },
                "acceptanceCriteria": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "nextActions": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "implementationNotes": {
                  "type": "string"
                },
                "activityLog": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/v1ActivityLogEntry"
                  },
                  "title": "Activity tracking"
                },
                "confidenceDetails": {
                  "$ref": "#/definitions/v1ConfidenceScoreDetails",
                  "description": "Detailed breakdown of confidence score",
                  "title": "Enhanced workflow fields (added in v0.2.0)"
                },
                "priority": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Explicit priority override (0-100)"
                },
                "blockers": {
                  "type": "string",
                  "title": "Description of what's blocking the task"
                },
                "startedAt": {
                  "type": "string",
                  "format": "date-time",
                  "title": "When task first moved to in-progress"
                },
                "completedAt": {
                  "type": "string",
                  "format": "date-time",
                  "title": "When task moved to completed status"
                },
                "estimatedEffort": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Estimated effort in story points"
                },
                "actualEffort": {
                  "type": "integer",
                  "format": "int32",
                  "title": "Actual effort in story points"
                },
                "componentType": {
                  "$ref": "#/definitions/v1ComponentType",
                  "title": "Technical component type for UI categorization"
                }
              },
              "title": "Task represents a unit of work in the Forge system"
            }
          },
          {
            "name": "agentId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/v1/tasks/{taskId}": {
      "get": {
        "summary": "Get task by ID",
        "description": "Retrieves a specific task by its ID, including all details and activity log",
        "operationId": "getTask",
        "responses": {
          "200": {
            "description": "Task details retrieved successfully",
            "schema": {
              "$ref": "#/definitions/v1GetTaskResponse"
            },
            "examples": {
              "application/json": {
                "task": {
                  "id": "task-auth-12345",
                  "title": "Implement authentication",
                  "status": "in-progress",
                  "persona": "principal-developer",
                  "confidence_score": 85,
                  "version": "1.0.0",
                  "definition": "Implement OAuth2/JWT authentication system",
                  "dependencies": [
                    "task-api-client-12345"
                  ],
                  "activity_log": [
                    {
                      "timestamp": "2023-05-01T10:00:00Z",
                      "action": "task_created",
                      "agent_id": "technical-architect",
                      "details": "Created initial task definition"
                    }
                  ]
                },
                "status": {
                  "success": true
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Tasks"
        ]
      },
      "delete": {
        "summary": "DeleteTask removes a task (rarely used, primarily for administrative purposes)\nTasks that are no longer needed should typically be moved to 'completed' status instead",
        "operationId": "TaskService_DeleteTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteTaskResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "agentId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/v1/tasks/{taskId}/blockedBy": {
      "get": {
        "summary": "GetBlockedBy retrieves tasks that are blocked by a specific task\nUseful for understanding the impact of completing a task",
        "operationId": "TaskService_GetBlockedBy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetBlockedByResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/v1/tasks/{taskId}/blockers": {
      "get": {
        "summary": "GetBlockers retrieves tasks that are blocking a specific task\nUseful for understanding what's preventing a task from being worked on",
        "operationId": "TaskService_GetBlockers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetBlockersResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/v1/tasks/{taskId}/confidence": {
      "put": {
        "summary": "UpdateConfidenceScore updates a task's confidence score\nIncludes rationale for the score in specific categories",
        "operationId": "TaskService_UpdateConfidenceScore",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateConfidenceScoreResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "agentId": {
                  "type": "string"
                },
                "categories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "$ref": "#/definitions/v1ConfidenceScoreCategory"
                  }
                },
                "comment": {
                  "type": "string"
                }
              },
              "title": "Request message for UpdateConfidenceScore"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/v1/tasks/{taskId}/dependencies": {
      "get": {
        "summary": "GetDependencies retrieves all dependencies for a specific task",
        "operationId": "TaskService_GetDependencies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDependenciesResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      },
      "post": {
        "summary": "AddDependency adds a dependency relationship between tasks\nChecks for circular dependencies and updates task relationships",
        "operationId": "TaskService_AddDependency",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddDependencyResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "dependencyId": {
                  "type": "string"
                },
                "agentId": {
                  "type": "string"
                },
                "reason": {
                  "type": "string"
                }
              },
              "title": "Request message for AddDependency"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/v1/tasks/{taskId}/dependencies/{dependencyId}": {
      "delete": {
        "summary": "RemoveDependency removes a dependency relationship between tasks",
        "operationId": "TaskService_RemoveDependency",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RemoveDependencyResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dependencyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "agentId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "reason",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/v1/tasks/{taskId}/dependencyGraph": {
      "get": {
        "summary": "GetTaskDependencies retrieves detailed dependency information for graph visualization\nReturns both dependencies and dependents with full task details",
        "operationId": "TaskService_GetTaskDependencies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTaskDependenciesResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "description": "Task ID to get dependencies for",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeTransitive",
            "description": "Include transitive dependencies",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "maxDepth",
            "description": "Maximum depth for transitive dependencies (0 = unlimited)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeTaskDetails",
            "description": "Include full task details in response",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/v1/tasks/{taskId}/dependencyTree": {
      "get": {
        "summary": "GetDependencyTree builds a hierarchical tree view of task dependencies\nSupports both top-down and bottom-up traversal with depth limiting",
        "operationId": "TaskService_GetDependencyTree",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDependencyTreeResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "description": "Required: Root task ID for the tree",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "direction",
            "description": "Direction of traversal (default: TOP_DOWN)\n\n - TREE_DIRECTION_TOP_DOWN: Dependencies (what this task depends on)\n - TREE_DIRECTION_BOTTOM_UP: Dependents (what depends on this task)",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "TREE_DIRECTION_UNKNOWN",
              "TREE_DIRECTION_TOP_DOWN",
              "TREE_DIRECTION_BOTTOM_UP"
            ],
            "default": "TREE_DIRECTION_UNKNOWN"
          },
          {
            "name": "maxDepth",
            "description": "Maximum depth to traverse (0 = unlimited)",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "includeCompleted",
            "description": "Include completed tasks in tree",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "includeTaskDetails",
            "description": "Include full task details in nodes",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/v1/tasks/{taskId}/regretFlags": {
      "get": {
        "summary": "GetTaskRegretFlags retrieves all regret flags for a task\nReturns the complete history of implementation regrets",
        "operationId": "TaskService_GetTaskRegretFlags",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTaskRegretFlagsResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/v1/tasks/{taskId}:flagRegret": {
      "post": {
        "summary": "FlagTaskWithRegret flags a task with an implementation regret\nMoves the task to the 'flagged' status and creates a regret record",
        "operationId": "TaskService_FlagTaskWithRegret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1FlagTaskWithRegretResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "violationType": {
                  "type": "string"
                },
                "severity": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "impact": {
                  "type": "string"
                },
                "remediation": {
                  "type": "string"
                },
                "agentId": {
                  "type": "string"
                }
              },
              "title": "Request message for FlagTaskWithRegret"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/v1/tasks/{taskId}:move": {
      "post": {
        "summary": "MoveTask changes a task's status (e.g., from todo to in-progress)\nEnforces workflow transition rules and updates the task's position",
        "operationId": "TaskService_MoveTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MoveTaskResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "newStatus": {
                  "type": "string"
                },
                "comment": {
                  "type": "string"
                },
                "agentId": {
                  "type": "string"
                }
              },
              "title": "Request message for MoveTask"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/v1/tasks/{taskId}:resolveRegret": {
      "post": {
        "summary": "ResolveTaskRegret resolves a task's implementation regret\nMoves the task back to an appropriate status based on resolution",
        "operationId": "TaskService_ResolveTaskRegret",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResolveTaskRegretResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "newStatus": {
                  "type": "string"
                },
                "resolution": {
                  "type": "string"
                },
                "agentId": {
                  "type": "string"
                }
              },
              "title": "Request message for ResolveTaskRegret"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/v1/tasks/{taskId}:validateTransition": {
      "post": {
        "summary": "ValidateTaskTransition checks if a state transition is valid without performing it\nUseful for client-side validation before attempting a transition",
        "operationId": "TaskService_ValidateTaskTransition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ValidateTaskTransitionResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "currentStatus": {
                  "type": "string"
                },
                "targetStatus": {
                  "type": "string"
                }
              },
              "title": "Request message for ValidateTaskTransition"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/v1/tasks:batchGet": {
      "post": {
        "summary": "BatchGetTasks retrieves multiple tasks in a single request\nAccepts up to 100 task IDs and returns tasks in the same order",
        "operationId": "TaskService_BatchGetTasks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetTasksResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchGetTasksRequest"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/v1/tasks:pluckNext": {
      "post": {
        "summary": "PluckNextTask finds the best next task to work on\nUses the task selection algorithm to identify the highest priority task\nconsidering dependencies, confidence scores, and other factors",
        "operationId": "TaskService_PluckNextTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PluckNextTaskResponse"
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PluckNextTaskRequest"
            }
          }
        ],
        "tags": [
          "TaskService"
        ]
      }
    },
    "/api/v1/tasks:scaffold": {
      "post": {
        "summary": "Create a task from template",
        "description": "Creates a new task with default values and places it in 'todo' status. This is a quick way to create tasks with minimal input.",
        "operationId": "scaffoldTask",
        "responses": {
          "200": {
            "description": "Task successfully created from template",
            "schema": {
              "$ref": "#/definitions/v1ScaffoldTaskResponse"
            },
            "examples": {
              "application/json": {
                "task": {
                  "id": "task-auth-12345",
                  "title": "Implement authentication",
                  "status": "todo",
                  "persona": "principal-developer",
                  "confidence_score": 80,
                  "version": "1.0.0"
                },
                "status": {
                  "success": true
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "404": {
            "description": "Resource not found",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/v1Error"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ScaffoldTaskRequest"
            }
          }
        ],
        "tags": [
          "Tasks"
        ]
      }
    }
  },
  "definitions": {
    "GetDockerStatusResponseDockerVersion": {
      "type": "object",
      "properties": {
        "docker": {
          "type": "string"
        },
        "dock9": {
          "type": "string"
        }
      }
    },
    "HealthCheckResponseServingStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SERVING",
        "NOT_SERVING",
        "SERVICE_UNKNOWN"
      ],
      "default": "UNKNOWN"
    },
    "ListProjectsRequestSortBy": {
      "type": "string",
      "enum": [
        "SORT_UNSPECIFIED",
        "NAME",
        "CREATED_DATE",
        "LAST_MODIFIED"
      ],
      "default": "SORT_UNSPECIFIED",
      "title": "Sort parameters"
    },
    "ListProjectsRequestSortOrder": {
      "type": "string",
      "enum": [
        "ORDER_UNSPECIFIED",
        "ASCENDING",
        "DESCENDING"
      ],
      "default": "ORDER_UNSPECIFIED"
    },
    "UnderstandProjectProgressStage": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "SCANNING_FILES",
        "ANALYZING_TASKS",
        "BUILDING_INDICES",
        "GENERATING_REPORTS",
        "COMPLETED"
      ],
      "default": "UNKNOWN"
    },
    "healthHealthCheckResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/HealthCheckResponseServingStatus"
        }
      },
      "title": "Response message for health check"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Activity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier for the activity"
        },
        "taskId": {
          "type": "string",
          "title": "Task ID associated with this activity (if applicable)"
        },
        "action": {
          "type": "string",
          "title": "The action performed (e.g., \"task_created\", \"status_updated\", \"pr_created\")"
        },
        "details": {
          "type": "string",
          "title": "Additional details about the activity"
        },
        "agentId": {
          "type": "string",
          "title": "ID of the agent that performed the action"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "title": "When the activity occurred"
        },
        "projectId": {
          "type": "string",
          "title": "Project ID associated with this activity"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional metadata as key-value pairs"
        }
      },
      "title": "Activity represents a single activity in the system"
    },
    "v1ActivityFilter": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string",
          "title": "Filter by project ID"
        },
        "taskId": {
          "type": "string",
          "title": "Filter by task ID"
        },
        "agentId": {
          "type": "string",
          "title": "Filter by agent ID"
        },
        "action": {
          "type": "string",
          "title": "Filter by action type"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "title": "Filter activities after this timestamp"
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "title": "Filter activities before this timestamp"
        }
      },
      "title": "ActivityFilter provides filtering options for listing activities"
    },
    "v1ActivityLogEntry": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "action": {
          "type": "string"
        },
        "agentId": {
          "type": "string"
        },
        "details": {
          "type": "string"
        }
      },
      "title": "ActivityLogEntry represents a single entry in a task's activity log"
    },
    "v1AddDependencyResponse": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/v1Task"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for AddDependency"
    },
    "v1AgentAvailability": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1AgentStatus",
          "title": "Current status"
        },
        "reason": {
          "type": "string",
          "title": "Optional reason for unavailability"
        },
        "capacityPercentage": {
          "type": "integer",
          "format": "int32",
          "title": "Current capacity utilization (0-100)"
        }
      },
      "title": "AgentAvailability indicates the current availability status of an agent"
    },
    "v1AgentContext": {
      "type": "object",
      "properties": {
        "persona": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "contextData": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "recentTasks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rememberedInsights": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "AgentContext contains the context information for an agent persona"
    },
    "v1AgentInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Agent persona ID",
          "title": "Core agent information"
        },
        "name": {
          "type": "string",
          "title": "Human-readable name"
        },
        "description": {
          "type": "string",
          "title": "Agent description"
        },
        "responsibilities": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Key responsibilities"
        },
        "workload": {
          "$ref": "#/definitions/v1AgentWorkload",
          "description": "Current workload metrics",
          "title": "Workload information"
        },
        "availability": {
          "$ref": "#/definitions/v1AgentAvailability",
          "title": "Availability status"
        },
        "lastActive": {
          "type": "string",
          "format": "date-time",
          "description": "Last activity timestamp",
          "title": "Metadata"
        },
        "specializations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Areas of specialization"
        }
      },
      "title": "AgentInfo contains detailed information about an agent including workload"
    },
    "v1AgentStatus": {
      "type": "string",
      "enum": [
        "AGENT_STATUS_UNKNOWN",
        "AGENT_STATUS_AVAILABLE",
        "AGENT_STATUS_BUSY",
        "AGENT_STATUS_OVERLOADED",
        "AGENT_STATUS_OFFLINE"
      ],
      "default": "AGENT_STATUS_UNKNOWN",
      "description": "- AGENT_STATUS_AVAILABLE: Ready for new tasks\n - AGENT_STATUS_BUSY: At capacity but functional\n - AGENT_STATUS_OVERLOADED: Over capacity, should not receive new tasks\n - AGENT_STATUS_OFFLINE: Not available",
      "title": "AgentStatus represents the availability status of an agent"
    },
    "v1AgentWorkload": {
      "type": "object",
      "properties": {
        "totalTasks": {
          "type": "integer",
          "format": "int32",
          "title": "Total tasks assigned to this agent"
        },
        "todoTasks": {
          "type": "integer",
          "format": "int32",
          "title": "Tasks in todo status"
        },
        "inProgressTasks": {
          "type": "integer",
          "format": "int32",
          "title": "Tasks currently in progress"
        },
        "inReviewTasks": {
          "type": "integer",
          "format": "int32",
          "title": "Tasks awaiting review"
        },
        "blockedTasks": {
          "type": "integer",
          "format": "int32",
          "title": "Tasks that are blocked"
        },
        "completedTasks": {
          "type": "integer",
          "format": "int32",
          "title": "Recently completed tasks (last 30 days)"
        },
        "averageConfidence": {
          "type": "number",
          "format": "double",
          "title": "Average confidence score of assigned tasks"
        },
        "workloadScore": {
          "type": "number",
          "format": "double",
          "title": "Calculated workload score (0-100)"
        }
      },
      "title": "AgentWorkload tracks the current task load for an agent"
    },
    "v1AnalysisOptions": {
      "type": "object",
      "properties": {
        "criticalOnly": {
          "type": "boolean",
          "title": "Focus only on critical questions if true"
        },
        "minConfidence": {
          "type": "number",
          "format": "float",
          "title": "Minimum confidence score for considering a question answered"
        },
        "timeoutSeconds": {
          "type": "integer",
          "format": "int32",
          "title": "Maximum processing time in seconds"
        },
        "includeEvidence": {
          "type": "boolean",
          "title": "Enable detailed evidence extraction"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Specific question categories to analyze"
        }
      },
      "description": "AnalysisOptions configures how the analysis should be performed."
    },
    "v1AnalysisResponse": {
      "type": "object",
      "properties": {
        "analysisId": {
          "type": "string",
          "title": "Unique identifier for this analysis"
        },
        "coverage": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1QuestionCoverage"
          },
          "title": "Coverage results for each question"
        },
        "summary": {
          "$ref": "#/definitions/v1AnalysisSummary",
          "title": "Summary of analysis results"
        },
        "missingCriticalInfo": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of critical missing information"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus",
          "title": "Response status"
        }
      },
      "description": "AnalysisResponse contains the results of document analysis."
    },
    "v1AnalysisStatusResponse": {
      "type": "object",
      "properties": {
        "analysisId": {
          "type": "string",
          "title": "Analysis identifier"
        },
        "status": {
          "type": "string",
          "title": "Current status (pending, processing, completed, failed)"
        },
        "progress": {
          "type": "number",
          "format": "float",
          "title": "Progress percentage (0.0 to 1.0)"
        },
        "message": {
          "type": "string",
          "title": "Status message"
        },
        "results": {
          "$ref": "#/definitions/v1AnalysisResponse",
          "title": "Analysis results (only present if status is completed)"
        },
        "responseStatus": {
          "$ref": "#/definitions/v1ResponseStatus",
          "title": "Response status"
        }
      },
      "description": "AnalysisStatusResponse contains status information for an analysis."
    },
    "v1AnalysisSummary": {
      "type": "object",
      "properties": {
        "totalQuestions": {
          "type": "integer",
          "format": "int32",
          "title": "Total number of questions evaluated"
        },
        "answeredQuestions": {
          "type": "integer",
          "format": "int32",
          "title": "Number of questions answered"
        },
        "criticalAnswered": {
          "type": "integer",
          "format": "int32",
          "title": "Number of critical questions answered"
        },
        "criticalTotal": {
          "type": "integer",
          "format": "int32",
          "title": "Number of critical questions total"
        },
        "coveragePercentage": {
          "type": "number",
          "format": "float",
          "title": "Overall coverage percentage (0.0 to 1.0)"
        },
        "averageConfidence": {
          "type": "number",
          "format": "float",
          "title": "Average confidence score for answered questions"
        },
        "projectType": {
          "type": "string",
          "title": "Project type analyzed"
        },
        "completedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Analysis completion time"
        },
        "processingTimeSeconds": {
          "type": "number",
          "format": "float",
          "title": "Processing duration in seconds"
        }
      },
      "description": "AnalysisSummary provides high-level analysis results."
    },
    "v1AnalyzeDocumentsRequest": {
      "type": "object",
      "properties": {
        "documents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DocumentContent"
          },
          "title": "Documents to analyze for question coverage"
        },
        "projectType": {
          "type": "string",
          "title": "Project type to determine which questions to evaluate against"
        },
        "options": {
          "$ref": "#/definitions/v1AnalysisOptions",
          "title": "Analysis configuration options"
        }
      },
      "description": "AnalyzeDocumentsRequest contains documents and configuration for analysis."
    },
    "v1AnalyzeProjectFilesResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "progress": {
          "$ref": "#/definitions/v1UnderstandingProgress"
        },
        "fileResult": {
          "$ref": "#/definitions/v1FileUnderstandingComplete",
          "title": "When a file analysis is complete"
        },
        "completed": {
          "type": "boolean",
          "title": "True when entire process is complete"
        }
      },
      "title": "File understanding analysis response (streamed)"
    },
    "v1Answer": {
      "type": "object",
      "properties": {
        "questionId": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "answeredAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Answer"
    },
    "v1AuditRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1RequestStatus"
        },
        "auditorId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "deliverableFiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "AuditRequest represents an external audit request"
    },
    "v1BatchGetTasksRequest": {
      "type": "object",
      "properties": {
        "taskIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Up to 100 task IDs"
        },
        "fieldMask": {
          "type": "string",
          "title": "Optional field selection"
        }
      },
      "title": "Request message for BatchGetTasks"
    },
    "v1BatchGetTasksResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BatchTaskResult"
          },
          "title": "Results in same order as requested"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for BatchGetTasks"
    },
    "v1BatchTaskResult": {
      "type": "object",
      "properties": {
        "taskId": {
          "type": "string",
          "title": "The requested task ID"
        },
        "task": {
          "$ref": "#/definitions/v1Task",
          "title": "The task data (nil if not found)"
        },
        "found": {
          "type": "boolean",
          "title": "Whether the task was found"
        },
        "error": {
          "type": "string",
          "title": "Error message if task couldn't be retrieved"
        }
      },
      "title": "BatchTaskResult represents a single task result in a batch operation"
    },
    "v1BlockedTaskInfo": {
      "type": "object",
      "properties": {
        "taskId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "blockedReason": {
          "type": "string"
        },
        "blockedSince": {
          "type": "string"
        },
        "blockingTasks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "BlockedTaskInfo contains information about blocked tasks"
    },
    "v1BuildReleaseContainerRequest": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "dockerfilePath": {
          "type": "string"
        },
        "contextDir": {
          "type": "string"
        },
        "buildArgs": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Request message for BuildReleaseContainer"
    },
    "v1BuildReleaseContainerResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "progress": {
          "type": "number",
          "format": "float"
        },
        "currentStep": {
          "type": "string"
        },
        "logOutput": {
          "type": "string"
        },
        "complete": {
          "type": "boolean"
        },
        "imageId": {
          "type": "string"
        }
      },
      "title": "Response message for BuildReleaseContainer"
    },
    "v1BurndownPoint": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "remainingTasks": {
          "type": "integer",
          "format": "int32"
        },
        "completedTasks": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "BurndownPoint represents a point in the burndown chart"
    },
    "v1CodeComplexity": {
      "type": "object",
      "properties": {
        "linesOfCode": {
          "type": "integer",
          "format": "int32"
        },
        "functions": {
          "type": "integer",
          "format": "int32"
        },
        "classes": {
          "type": "integer",
          "format": "int32"
        },
        "cyclomaticComplexity": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Code complexity metrics"
    },
    "v1ComponentType": {
      "type": "string",
      "enum": [
        "COMPONENT_TYPE_UNSPECIFIED",
        "COMPONENT_TYPE_FRONTEND",
        "COMPONENT_TYPE_BACKEND",
        "COMPONENT_TYPE_DATABASE",
        "COMPONENT_TYPE_API",
        "COMPONENT_TYPE_INFRASTRUCTURE"
      ],
      "default": "COMPONENT_TYPE_UNSPECIFIED",
      "title": "ComponentType categorizes tasks by technical area for frontend filtering"
    },
    "v1ConfidenceDistribution": {
      "type": "object",
      "properties": {
        "veryHigh": {
          "type": "integer",
          "format": "int32",
          "title": "90-100"
        },
        "high": {
          "type": "integer",
          "format": "int32",
          "title": "80-89"
        },
        "medium": {
          "type": "integer",
          "format": "int32",
          "title": "70-79"
        },
        "low": {
          "type": "integer",
          "format": "int32",
          "title": "60-69"
        },
        "veryLow": {
          "type": "integer",
          "format": "int32",
          "title": "0-59"
        },
        "averageScore": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "Confidence score distribution"
    },
    "v1ConfidenceScoreCategory": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "description": "e.g., \"requirement_clarity\", \"dependency_readiness\", etc."
        },
        "score": {
          "type": "integer",
          "format": "int32",
          "title": "Score for this category (0-25)"
        },
        "rationale": {
          "type": "string",
          "title": "Explanation for the score"
        }
      },
      "title": "ConfidenceScoreCategory represents a component of a confidence score"
    },
    "v1ConfidenceScoreDetails": {
      "type": "object",
      "properties": {
        "requirementClarity": {
          "type": "integer",
          "format": "int32",
          "title": "0-25, how well-defined the requirements are"
        },
        "dependencyReadiness": {
          "type": "integer",
          "format": "int32",
          "title": "0-25, whether dependencies are complete and stable"
        },
        "technicalFeasibility": {
          "type": "integer",
          "format": "int32",
          "title": "0-25, how technically straightforward the task is"
        },
        "resourceAvailability": {
          "type": "integer",
          "format": "int32",
          "title": "0-25, whether necessary resources are available"
        },
        "rationale": {
          "type": "string",
          "title": "Explanation for the confidence score"
        }
      },
      "title": "ConfidenceScoreDetails contains the breakdown of a task's confidence score"
    },
    "v1ContainerInfo": {
      "type": "object",
      "properties": {
        "imageId": {
          "type": "string"
        },
        "registryPath": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string"
        },
        "sizeBytes": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "ContainerInfo describes a container"
    },
    "v1CreateAuditRequestResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "auditRequest": {
          "$ref": "#/definitions/v1AuditRequest"
        }
      },
      "title": "Response message for CreateAuditRequest"
    },
    "v1CreateFeatureRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Required: Feature name"
        },
        "description": {
          "type": "string",
          "title": "Required: Feature description"
        },
        "releaseVersion": {
          "type": "string",
          "title": "Required: Release version"
        },
        "category": {
          "type": "string",
          "title": "Optional: Feature category"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Optional: Tags"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "title": "Optional: Priority (defaults to 50)"
        },
        "initialTaskIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Optional: Initial tasks to associate"
        }
      }
    },
    "v1CreateFeatureResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "feature": {
          "$ref": "#/definitions/v1Feature"
        }
      }
    },
    "v1CreateReleaseBranchRequest": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "agentId": {
          "type": "string"
        }
      }
    },
    "v1CreateReleaseBranchResponse": {
      "type": "object",
      "properties": {
        "branchName": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      }
    },
    "v1CreateReleasePullRequestRequest": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "agentId": {
          "type": "string"
        },
        "titleOverride": {
          "type": "string",
          "title": "Optional custom PR title"
        },
        "bodyOverride": {
          "type": "string",
          "title": "Optional custom PR body"
        }
      }
    },
    "v1CreateReleasePullRequestResponse": {
      "type": "object",
      "properties": {
        "prUrl": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      }
    },
    "v1CreateRequirementRequestResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "requirementRequest": {
          "$ref": "#/definitions/v1RequirementRequest"
        }
      },
      "title": "Response message for CreateRequirementRequest"
    },
    "v1CreateResearchRequestResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "researchRequest": {
          "$ref": "#/definitions/v1ResearchRequest"
        }
      },
      "title": "Response message for CreateResearchRequest"
    },
    "v1CreateTaskBranchRequest": {
      "type": "object",
      "properties": {
        "taskId": {
          "type": "string"
        },
        "agentId": {
          "type": "string"
        }
      }
    },
    "v1CreateTaskBranchResponse": {
      "type": "object",
      "properties": {
        "branchName": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      }
    },
    "v1CreateTaskPullRequestRequest": {
      "type": "object",
      "properties": {
        "taskId": {
          "type": "string"
        },
        "agentId": {
          "type": "string"
        },
        "titleOverride": {
          "type": "string",
          "title": "Optional custom PR title"
        },
        "bodyOverride": {
          "type": "string",
          "title": "Optional custom PR body"
        }
      }
    },
    "v1CreateTaskPullRequestResponse": {
      "type": "object",
      "properties": {
        "prUrl": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      }
    },
    "v1CreateTaskResponse": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/v1Task"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for CreateTask"
    },
    "v1CycleNode": {
      "type": "object",
      "properties": {
        "taskId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "persona": {
          "type": "string"
        },
        "confidenceScore": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "CycleNode provides details about a task in a cycle"
    },
    "v1DashboardAgentInfo": {
      "type": "object",
      "properties": {
        "agentId": {
          "type": "string"
        },
        "persona": {
          "type": "string"
        },
        "currentTaskId": {
          "type": "string"
        },
        "currentTaskTitle": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "title": "active, idle, error"
        },
        "lastActivity": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "DashboardAgentInfo contains information about active AI agents"
    },
    "v1DashboardData": {
      "type": "object",
      "properties": {
        "projectStats": {
          "$ref": "#/definitions/v1ProjectStats",
          "title": "Project statistics"
        },
        "recentActivities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Activity"
          },
          "title": "Recent activities"
        },
        "currentTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Task"
          },
          "title": "Current active tasks"
        },
        "releaseSummary": {
          "$ref": "#/definitions/v1DashboardReleaseSummary",
          "title": "Current release information"
        },
        "activeAgents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DashboardAgentInfo"
          },
          "title": "Active AI agents"
        },
        "taskDistribution": {
          "$ref": "#/definitions/v1TaskDistribution",
          "title": "Task distribution metrics"
        },
        "performanceMetrics": {
          "$ref": "#/definitions/v1PerformanceMetrics",
          "title": "System performance data"
        },
        "generatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "When this data was generated"
        }
      },
      "title": "DashboardData contains all dashboard information"
    },
    "v1DashboardReleaseSummary": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "totalTasks": {
          "type": "integer",
          "format": "int32"
        },
        "completedTasks": {
          "type": "integer",
          "format": "int32"
        },
        "progressPercentage": {
          "type": "number",
          "format": "double"
        },
        "targetDate": {
          "type": "string",
          "format": "date-time"
        },
        "blockingIssues": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "DashboardReleaseSummary contains current release information for dashboard"
    },
    "v1DashboardSection": {
      "type": "string",
      "enum": [
        "DASHBOARD_SECTION_UNSPECIFIED",
        "DASHBOARD_SECTION_PROJECT_STATS",
        "DASHBOARD_SECTION_RECENT_ACTIVITIES",
        "DASHBOARD_SECTION_CURRENT_TASKS",
        "DASHBOARD_SECTION_RELEASE_SUMMARY",
        "DASHBOARD_SECTION_ACTIVE_AGENTS",
        "DASHBOARD_SECTION_TASK_DISTRIBUTION",
        "DASHBOARD_SECTION_PERFORMANCE_METRICS"
      ],
      "default": "DASHBOARD_SECTION_UNSPECIFIED",
      "description": "- DASHBOARD_SECTION_PROJECT_STATS: Project statistics and metrics\n - DASHBOARD_SECTION_RECENT_ACTIVITIES: Recent activity feed\n - DASHBOARD_SECTION_CURRENT_TASKS: Current active tasks\n - DASHBOARD_SECTION_RELEASE_SUMMARY: Release progress and summary\n - DASHBOARD_SECTION_ACTIVE_AGENTS: Currently active AI agents\n - DASHBOARD_SECTION_TASK_DISTRIBUTION: Task distribution by status/persona\n - DASHBOARD_SECTION_PERFORMANCE_METRICS: System performance metrics",
      "title": "DashboardSection specifies which sections to include in the response"
    },
    "v1DeleteFeatureResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      }
    },
    "v1DeleteTaskResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for DeleteTask"
    },
    "v1DependencyCycle": {
      "type": "object",
      "properties": {
        "taskIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Ordered list of task IDs forming the cycle"
        },
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CycleNode"
          },
          "title": "Detailed information about each node"
        },
        "visualizationData": {
          "type": "string",
          "title": "JSON data for UI visualization"
        }
      },
      "title": "DependencyCycle represents a cycle in the dependency graph"
    },
    "v1DependencyEdge": {
      "type": "object",
      "properties": {
        "fromTaskId": {
          "type": "string",
          "title": "Task that depends on another"
        },
        "toTaskId": {
          "type": "string",
          "title": "Task that is depended upon"
        },
        "type": {
          "$ref": "#/definitions/v1DependencyType",
          "title": "Type of dependency"
        },
        "isSatisfied": {
          "type": "boolean",
          "title": "Whether this dependency is satisfied"
        },
        "satisfactionReason": {
          "type": "string",
          "title": "Why satisfied/not satisfied"
        },
        "isTransitive": {
          "type": "boolean",
          "title": "Whether this is a transitive dependency"
        },
        "pathDistance": {
          "type": "integer",
          "format": "int32",
          "title": "Distance in the dependency path"
        }
      },
      "title": "DependencyEdge represents a dependency relationship"
    },
    "v1DependencyGraph": {
      "type": "object",
      "properties": {
        "rootTaskId": {
          "type": "string",
          "title": "The task ID this graph is centered on"
        },
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DependencyNode"
          },
          "title": "All nodes in the dependency graph"
        },
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DependencyEdge"
          },
          "title": "All edges (relationships) in the graph"
        },
        "stats": {
          "$ref": "#/definitions/v1DependencyStats",
          "title": "Statistics about the graph"
        },
        "hasCycles": {
          "type": "boolean",
          "title": "Whether circular dependencies were detected"
        },
        "cyclePaths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Paths containing cycles (if any)"
        }
      },
      "title": "DependencyGraph represents the complete dependency information"
    },
    "v1DependencyNode": {
      "type": "object",
      "properties": {
        "taskId": {
          "type": "string",
          "title": "Task ID"
        },
        "title": {
          "type": "string",
          "title": "Task title"
        },
        "status": {
          "type": "string",
          "title": "Current task status"
        },
        "confidenceScore": {
          "type": "integer",
          "format": "int32",
          "title": "Task confidence score"
        },
        "persona": {
          "type": "string",
          "title": "Assigned persona"
        },
        "directDependencyCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of direct dependencies",
          "title": "Dependency information"
        },
        "directDependentCount": {
          "type": "integer",
          "format": "int32",
          "title": "Number of direct dependents"
        },
        "transitiveDependencyCount": {
          "type": "integer",
          "format": "int32",
          "title": "Total dependencies (including transitive)"
        },
        "transitiveDependentCount": {
          "type": "integer",
          "format": "int32",
          "title": "Total dependents (including transitive)"
        },
        "isBlocked": {
          "type": "boolean",
          "description": "Whether this task is blocked",
          "title": "Status information"
        },
        "isBlocker": {
          "type": "boolean",
          "title": "Whether this task blocks others"
        },
        "blockingTaskIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "IDs of tasks blocking this one"
        },
        "blockedTaskIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "IDs of tasks blocked by this one"
        },
        "depthFromRoot": {
          "type": "integer",
          "format": "int32",
          "description": "Distance from the root task",
          "title": "Graph metadata"
        },
        "isOnCriticalPath": {
          "type": "boolean",
          "title": "Whether this task is on a critical path"
        },
        "fullTask": {
          "$ref": "#/definitions/v1Task",
          "description": "Full task details (if requested)",
          "title": "Optional full task details"
        }
      },
      "title": "DependencyNode represents a task in the dependency graph"
    },
    "v1DependencyStats": {
      "type": "object",
      "properties": {
        "totalNodes": {
          "type": "integer",
          "format": "int32",
          "title": "Total number of tasks in graph"
        },
        "totalEdges": {
          "type": "integer",
          "format": "int32",
          "title": "Total number of dependencies"
        },
        "maxDepth": {
          "type": "integer",
          "format": "int32",
          "title": "Maximum depth of dependency tree"
        },
        "blockedTasks": {
          "type": "integer",
          "format": "int32",
          "title": "Number of blocked tasks"
        },
        "satisfiedDependencies": {
          "type": "integer",
          "format": "int32",
          "title": "Number of satisfied dependencies"
        },
        "unsatisfiedDependencies": {
          "type": "integer",
          "format": "int32",
          "title": "Number of unsatisfied dependencies"
        },
        "criticalPath": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Task IDs forming the critical path"
        },
        "completionPercentage": {
          "type": "number",
          "format": "double",
          "title": "Percentage of tasks completed"
        }
      },
      "title": "DependencyStats provides statistics about the dependency graph"
    },
    "v1DependencyTreeNode": {
      "type": "object",
      "properties": {
        "taskId": {
          "type": "string",
          "title": "Task ID"
        },
        "title": {
          "type": "string",
          "title": "Task title"
        },
        "status": {
          "type": "string",
          "title": "Current task status"
        },
        "persona": {
          "type": "string",
          "title": "Assigned persona"
        },
        "confidenceScore": {
          "type": "integer",
          "format": "int32",
          "title": "Task confidence score"
        },
        "children": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DependencyTreeNode"
          },
          "description": "Child nodes (dependencies or dependents)",
          "title": "Tree structure"
        },
        "depth": {
          "type": "integer",
          "format": "int32",
          "title": "Depth in the tree (root = 0)"
        },
        "isExpanded": {
          "type": "boolean",
          "title": "Whether this node has been fully expanded"
        },
        "hasMoreChildren": {
          "type": "boolean",
          "title": "Whether there are unexpanded children (due to depth limit)"
        },
        "isSatisfied": {
          "type": "boolean",
          "description": "Whether all dependencies are satisfied",
          "title": "Dependency information"
        },
        "totalSubtreeCount": {
          "type": "integer",
          "format": "int32",
          "title": "Total number of tasks in subtree"
        },
        "blockedSubtreeCount": {
          "type": "integer",
          "format": "int32",
          "title": "Number of blocked tasks in subtree"
        },
        "taskDetails": {
          "$ref": "#/definitions/v1Task",
          "description": "Full task details (if requested)",
          "title": "Optional full task details"
        }
      },
      "title": "DependencyTreeNode represents a node in the hierarchical dependency tree"
    },
    "v1DependencyType": {
      "type": "string",
      "enum": [
        "DEPENDENCY_TYPE_UNKNOWN",
        "DEPENDENCY_TYPE_DIRECT",
        "DEPENDENCY_TYPE_TRANSITIVE",
        "DEPENDENCY_TYPE_CIRCULAR"
      ],
      "default": "DEPENDENCY_TYPE_UNKNOWN",
      "description": "- DEPENDENCY_TYPE_DIRECT: Direct dependency\n - DEPENDENCY_TYPE_TRANSITIVE: Transitive dependency\n - DEPENDENCY_TYPE_CIRCULAR: Part of a circular dependency",
      "title": "DependencyType indicates the type of dependency relationship"
    },
    "v1DetectCyclesResponse": {
      "type": "object",
      "properties": {
        "cycles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DependencyCycle"
          },
          "title": "All cycles found"
        },
        "totalCycles": {
          "type": "integer",
          "format": "int32",
          "title": "Total number of cycles"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for DetectCycles"
    },
    "v1DocumentContent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Document name or identifier"
        },
        "content": {
          "type": "string",
          "title": "Document content as text"
        },
        "format": {
          "type": "string",
          "title": "Document format (markdown, text, etc.)"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional metadata about the document"
        }
      },
      "description": "DocumentContent represents a single document to be analyzed."
    },
    "v1Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "string"
        }
      },
      "title": "Error message with code and details"
    },
    "v1Feature": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique feature identifier",
          "title": "Core metadata"
        },
        "name": {
          "type": "string",
          "title": "Human-readable feature name"
        },
        "description": {
          "type": "string",
          "title": "Detailed description of the feature"
        },
        "releaseVersion": {
          "type": "string",
          "title": "Release version this feature belongs to"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "title": "When the feature was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "When the feature was last updated"
        },
        "progress": {
          "$ref": "#/definitions/v1FeatureProgress",
          "description": "Current progress information",
          "title": "Progress tracking"
        },
        "taskIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Tasks that belong to this feature",
          "title": "Task relationships"
        },
        "category": {
          "type": "string",
          "description": "Feature category (e.g., \"frontend\", \"backend\", \"infrastructure\")",
          "title": "Metadata for UI categorization"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Tags for additional categorization"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "title": "Feature priority (1-100, higher is more important)"
        }
      },
      "title": "Feature represents a group of related tasks"
    },
    "v1FeatureProgress": {
      "type": "object",
      "properties": {
        "totalTasks": {
          "type": "integer",
          "format": "int32",
          "title": "Total number of tasks in the feature"
        },
        "completedTasks": {
          "type": "integer",
          "format": "int32",
          "title": "Number of completed tasks"
        },
        "inProgressTasks": {
          "type": "integer",
          "format": "int32",
          "title": "Number of tasks currently in progress"
        },
        "blockedTasks": {
          "type": "integer",
          "format": "int32",
          "title": "Number of blocked tasks"
        },
        "completionPercentage": {
          "type": "number",
          "format": "double",
          "title": "Completion percentage (0.0 to 100.0)"
        },
        "estimatedCompletion": {
          "type": "string",
          "format": "date-time",
          "title": "Estimated completion date (optional)"
        }
      },
      "title": "FeatureProgress tracks completion status and metrics"
    },
    "v1FileDependencies": {
      "type": "object",
      "properties": {
        "imports": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "exports": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Dependencies and exports of a file"
    },
    "v1FileMetadata": {
      "type": "object",
      "properties": {
        "filePath": {
          "type": "string"
        },
        "analyzedAt": {
          "type": "string",
          "format": "date-time"
        },
        "fileModifiedAt": {
          "type": "string",
          "format": "date-time"
        },
        "fileHash": {
          "type": "string"
        },
        "analyzerVersion": {
          "type": "string"
        },
        "language": {
          "type": "string"
        }
      },
      "title": "File metadata for understanding analysis"
    },
    "v1FileUnderstanding": {
      "type": "object",
      "properties": {
        "summary": {
          "type": "string"
        },
        "keyComponents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1KeyComponent"
          }
        },
        "dependencies": {
          "$ref": "#/definitions/v1FileDependencies"
        },
        "complexity": {
          "$ref": "#/definitions/v1CodeComplexity"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "purpose": {
          "type": "string"
        }
      },
      "title": "Understanding content for a file"
    },
    "v1FileUnderstandingComplete": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1FileMetadata"
        },
        "understanding": {
          "$ref": "#/definitions/v1FileUnderstanding"
        }
      },
      "title": "Complete file understanding with metadata"
    },
    "v1FlagTaskWithRegretResponse": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/v1Task"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for FlagTaskWithRegret"
    },
    "v1GetAgentContextResponse": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1AgentContext"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for GetAgentContext"
    },
    "v1GetAuditRequestResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "auditRequest": {
          "$ref": "#/definitions/v1AuditRequest"
        }
      },
      "title": "Response message for GetAuditRequest"
    },
    "v1GetBlockedByResponse": {
      "type": "object",
      "properties": {
        "tasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Task"
          }
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for GetBlockedBy"
    },
    "v1GetBlockersResponse": {
      "type": "object",
      "properties": {
        "tasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Task"
          }
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for GetBlockers"
    },
    "v1GetDashboardDataResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus",
          "title": "Operation status"
        },
        "data": {
          "$ref": "#/definitions/v1DashboardData",
          "title": "Dashboard data when successful"
        },
        "cachedAt": {
          "type": "string",
          "format": "date-time",
          "title": "When data was cached (if from cache)"
        }
      },
      "title": "GetDashboardDataResponse contains all dashboard data"
    },
    "v1GetDependenciesResponse": {
      "type": "object",
      "properties": {
        "dependencyIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for GetDependencies"
    },
    "v1GetDependencyTreeResponse": {
      "type": "object",
      "properties": {
        "root": {
          "$ref": "#/definitions/v1DependencyTreeNode",
          "title": "Root node of the dependency tree"
        },
        "metadata": {
          "$ref": "#/definitions/v1TreeMetadata",
          "title": "Metadata about the tree"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for GetDependencyTree"
    },
    "v1GetDockerStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "dockerEnabled": {
          "type": "boolean"
        },
        "dock9Available": {
          "type": "boolean"
        },
        "registryConfigured": {
          "type": "boolean"
        },
        "registryAuthenticated": {
          "type": "boolean"
        },
        "version": {
          "$ref": "#/definitions/GetDockerStatusResponseDockerVersion"
        }
      },
      "title": "Response message for GetDockerStatus"
    },
    "v1GetFeatureResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "feature": {
          "$ref": "#/definitions/v1Feature"
        }
      }
    },
    "v1GetFeatureTasksResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "tasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Task"
          },
          "title": "Full task objects if include_details=true"
        },
        "taskIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Task IDs if include_details=false"
        },
        "progress": {
          "$ref": "#/definitions/v1FeatureProgress",
          "title": "Progress summary for the feature"
        }
      }
    },
    "v1GetFileUnderstandingResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "fileUnderstanding": {
          "$ref": "#/definitions/v1FileUnderstandingComplete"
        }
      },
      "title": "Get file understanding response"
    },
    "v1GetProjectMetadataResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ProjectMetadata"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for GetProjectMetadata"
    },
    "v1GetProjectQuestionsResponse": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1QuestionCategory"
          }
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for GetProjectQuestions"
    },
    "v1GetProjectResponse": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/v1Project"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for GetProject"
    },
    "v1GetProjectStatsResponse": {
      "type": "object",
      "properties": {
        "statistics": {
          "$ref": "#/definitions/v1ProjectStatistics"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for GetProjectStats"
    },
    "v1GetProjectTypesResponse": {
      "type": "object",
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProjectTypeCategory"
          }
        },
        "languages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LanguageOption"
          }
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for GetProjectTypes"
    },
    "v1GetPullRequestResponse": {
      "type": "object",
      "properties": {
        "prUrl": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "title": "open, merged, closed"
        },
        "responseStatus": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      }
    },
    "v1GetRecentActivitiesResponse": {
      "type": "object",
      "properties": {
        "activities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Activity"
          },
          "title": "List of recent activities"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus",
          "title": "Response status"
        }
      },
      "title": "GetRecentActivitiesResponse contains the recent activities"
    },
    "v1GetReleaseBranchResponse": {
      "type": "object",
      "properties": {
        "gitInfo": {
          "$ref": "#/definitions/v1GitInfo"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      }
    },
    "v1GetReleaseProgressResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "progress": {
          "$ref": "#/definitions/v1ReleaseProgress"
        }
      },
      "title": "Response message for GetReleaseProgress"
    },
    "v1GetRequirementRequestResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "requirementRequest": {
          "$ref": "#/definitions/v1RequirementRequest"
        }
      },
      "title": "Response message for GetRequirementRequest"
    },
    "v1GetResearchRequestResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "researchRequest": {
          "$ref": "#/definitions/v1ResearchRequest"
        }
      },
      "title": "Response message for GetResearchRequest"
    },
    "v1GetSimulationHistoryResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "history": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SimulationRun"
          }
        },
        "statistics": {
          "$ref": "#/definitions/v1SimulationStatistics"
        }
      },
      "title": "Response message for GetSimulationHistory"
    },
    "v1GetTaskBranchResponse": {
      "type": "object",
      "properties": {
        "gitInfo": {
          "$ref": "#/definitions/v1GitInfo"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      }
    },
    "v1GetTaskDependenciesResponse": {
      "type": "object",
      "properties": {
        "graph": {
          "$ref": "#/definitions/v1DependencyGraph"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for GetTaskDependencies"
    },
    "v1GetTaskRegretFlagsResponse": {
      "type": "object",
      "properties": {
        "flags": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RegretFlag"
          }
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for GetTaskRegretFlags"
    },
    "v1GetTaskResponse": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/v1Task"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for GetTask"
    },
    "v1GetUnderstandingStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "understandingStatus": {
          "$ref": "#/definitions/v1UnderstandingStatus"
        }
      },
      "title": "Get understanding status response"
    },
    "v1GitInfo": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "title": "active, merged, abandoned"
        },
        "prUrl": {
          "type": "string"
        }
      },
      "title": "GitInfo represents Git-related metadata for a task or release"
    },
    "v1HandlePostCheckoutHookRequest": {
      "type": "object",
      "properties": {
        "previousBranch": {
          "type": "string"
        },
        "currentBranch": {
          "type": "string"
        }
      }
    },
    "v1HandlePostCheckoutHookResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      }
    },
    "v1HandlePostMergeHookRequest": {
      "type": "object",
      "properties": {
        "mergedBranch": {
          "type": "string"
        },
        "targetBranch": {
          "type": "string"
        }
      }
    },
    "v1HandlePostMergeHookResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      }
    },
    "v1KeyComponent": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "title": "Key component found in a file"
    },
    "v1LanguageOption": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "iconId": {
          "type": "string"
        }
      },
      "title": "Language option"
    },
    "v1ListActivitiesResponse": {
      "type": "object",
      "properties": {
        "activities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Activity"
          },
          "title": "List of activities matching the filter criteria"
        },
        "nextPageToken": {
          "type": "string",
          "title": "Token for retrieving the next page of results"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32",
          "title": "Total count of activities matching the filter (across all pages)"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus",
          "title": "Response status"
        }
      },
      "title": "ListActivitiesResponse contains the list of activities"
    },
    "v1ListAgentsResponse": {
      "type": "object",
      "properties": {
        "agents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AgentInfo"
          }
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "nextPageToken": {
          "type": "string",
          "title": "Pagination information"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Response message for ListAgents"
    },
    "v1ListAuditsResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "auditRequests": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AuditRequest"
          }
        },
        "nextPageToken": {
          "type": "string"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Response message for ListAudits"
    },
    "v1ListFeaturesResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "features": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Feature"
          }
        },
        "nextPageToken": {
          "type": "string",
          "title": "Pagination information"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ListPersonasResponse": {
      "type": "object",
      "properties": {
        "personas": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Persona"
          }
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "nextPageToken": {
          "type": "string",
          "title": "Pagination information"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Response message for ListPersonas"
    },
    "v1ListProjectUnderstandingResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "files": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FileUnderstandingComplete"
          }
        },
        "nextPageToken": {
          "type": "string"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "List project understanding response"
    },
    "v1ListProjectsRequestProjectStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "ACTIVE",
        "ARCHIVED"
      ],
      "default": "STATUS_UNSPECIFIED",
      "title": "Filter parameters"
    },
    "v1ListProjectsResponse": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProjectSummary"
          }
        },
        "nextPageToken": {
          "type": "string"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for ListProjects"
    },
    "v1ListReleaseContainersResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "containers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ContainerInfo"
          }
        },
        "nextPageToken": {
          "type": "string",
          "title": "Pagination information"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Response message for ListReleaseContainers"
    },
    "v1ListReleasesResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "releases": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ReleaseInfo"
          }
        },
        "currentVersion": {
          "type": "string"
        },
        "nextPageToken": {
          "type": "string",
          "title": "Pagination information"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Response message for ListReleases"
    },
    "v1ListRequirementsResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "requirementRequests": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RequirementRequest"
          }
        },
        "nextPageToken": {
          "type": "string"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Response message for ListRequirements"
    },
    "v1ListResearchResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "researchRequests": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResearchRequest"
          }
        },
        "nextPageToken": {
          "type": "string"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Response message for ListResearch"
    },
    "v1ListSimulationsResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "simulations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SimulationInfo"
          }
        },
        "summary": {
          "$ref": "#/definitions/v1SimulationSummary"
        },
        "nextPageToken": {
          "type": "string",
          "title": "Pagination information"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Response message for ListSimulations"
    },
    "v1ListTasksResponse": {
      "type": "object",
      "properties": {
        "tasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Task"
          }
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "nextPageToken": {
          "type": "string",
          "title": "Pagination information"
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Response message for ListTasks"
    },
    "v1MoveTaskResponse": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/v1Task"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for MoveTask"
    },
    "v1PerformanceMetrics": {
      "type": "object",
      "properties": {
        "avgTaskCompletionTimeHours": {
          "type": "number",
          "format": "double"
        },
        "avgPrMergeTimeHours": {
          "type": "number",
          "format": "double"
        },
        "tasksCompletedToday": {
          "type": "integer",
          "format": "int32"
        },
        "tasksCompletedThisWeek": {
          "type": "integer",
          "format": "int32"
        },
        "velocityTrend": {
          "type": "number",
          "format": "double",
          "title": "Positive = improving, negative = slowing"
        },
        "cacheHitRate": {
          "type": "number",
          "format": "double",
          "title": "Dashboard cache hit rate"
        }
      },
      "title": "PerformanceMetrics contains system performance data"
    },
    "v1Persona": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "responsibilities": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Persona represents an agent role in the system"
    },
    "v1PersonaProgress": {
      "type": "object",
      "properties": {
        "persona": {
          "type": "string"
        },
        "totalTasks": {
          "type": "integer",
          "format": "int32"
        },
        "completedTasks": {
          "type": "integer",
          "format": "int32"
        },
        "completionPercentage": {
          "type": "number",
          "format": "float"
        },
        "averageConfidenceScore": {
          "type": "number",
          "format": "float"
        }
      },
      "title": "PersonaProgress shows progress breakdown by persona/agent"
    },
    "v1PluckNextTaskRequest": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "persona": {
          "type": "string"
        },
        "minConfidenceScore": {
          "type": "integer",
          "format": "int32"
        },
        "preferredStatus": {
          "type": "string",
          "title": "Preferred task status (e.g., \"todo\")"
        },
        "excludeTaskIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Tasks to exclude from selection"
        },
        "respectDependencies": {
          "type": "boolean",
          "title": "Whether to check task dependencies (default true)"
        },
        "minPriority": {
          "type": "integer",
          "format": "int32",
          "title": "Minimum task priority"
        },
        "maxEstimatedEffort": {
          "type": "integer",
          "format": "int32",
          "title": "Maximum estimated effort in story points"
        },
        "onlyReadyTasks": {
          "type": "boolean",
          "title": "Only tasks with no blockers"
        },
        "componentType": {
          "$ref": "#/definitions/v1ComponentType",
          "title": "Filter by component type"
        }
      },
      "title": "Request message for PluckNextTask"
    },
    "v1PluckNextTaskResponse": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/v1Task"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for PluckNextTask"
    },
    "v1ProcessAuditResultsResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "auditRequest": {
          "$ref": "#/definitions/v1AuditRequest"
        }
      },
      "title": "Response message for ProcessAuditResults"
    },
    "v1ProcessRequirementResultsResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "requirementRequest": {
          "$ref": "#/definitions/v1RequirementRequest"
        }
      },
      "title": "Response message for ProcessRequirementResults"
    },
    "v1ProcessResearchResultsResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "researchRequest": {
          "$ref": "#/definitions/v1ResearchRequest"
        }
      },
      "title": "Response message for ProcessResearchResults"
    },
    "v1Project": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "currentVersion": {
          "type": "string"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Project represents a Forge project"
    },
    "v1ProjectMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Project metadata"
    },
    "v1ProjectStatistics": {
      "type": "object",
      "properties": {
        "taskCounts": {
          "$ref": "#/definitions/v1TaskStatusCounts",
          "title": "Task counts by status"
        },
        "personaDistribution": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "title": "Task distribution by persona"
        },
        "projectProgress": {
          "type": "number",
          "format": "double",
          "title": "Overall project progress (0-100)"
        },
        "releaseSummary": {
          "$ref": "#/definitions/v1ReleaseSummary",
          "title": "Release summary"
        },
        "confidenceDistribution": {
          "$ref": "#/definitions/v1ConfidenceDistribution",
          "title": "Confidence score distribution"
        },
        "blockedCount": {
          "type": "integer",
          "format": "int32",
          "title": "Blocked and flagged counts"
        },
        "flaggedCount": {
          "type": "integer",
          "format": "int32"
        },
        "totalTasks": {
          "type": "integer",
          "format": "int32",
          "title": "Total task count"
        },
        "calculatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Timestamp when stats were calculated"
        },
        "fromCache": {
          "type": "boolean",
          "title": "Cache information"
        },
        "cacheAgeMs": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "Project statistics"
    },
    "v1ProjectStats": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "projectName": {
          "type": "string"
        },
        "totalTasks": {
          "type": "integer",
          "format": "int32"
        },
        "completedTasks": {
          "type": "integer",
          "format": "int32"
        },
        "inProgressTasks": {
          "type": "integer",
          "format": "int32"
        },
        "todoTasks": {
          "type": "integer",
          "format": "int32"
        },
        "blockedTasks": {
          "type": "integer",
          "format": "int32"
        },
        "flaggedTasks": {
          "type": "integer",
          "format": "int32"
        },
        "completionPercentage": {
          "type": "number",
          "format": "double"
        },
        "totalFeatures": {
          "type": "integer",
          "format": "int32"
        },
        "completedFeatures": {
          "type": "integer",
          "format": "int32"
        },
        "lastActivity": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "ProjectStats contains high-level project statistics"
    },
    "v1ProjectSummary": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "currentVersion": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/v1ProjectSummaryProjectStatus"
        },
        "activeTasks": {
          "type": "integer",
          "format": "int32"
        },
        "completedTasks": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Project summary for list view"
    },
    "v1ProjectSummaryProjectStatus": {
      "type": "string",
      "enum": [
        "STATUS_UNSPECIFIED",
        "ACTIVE",
        "ARCHIVED"
      ],
      "default": "STATUS_UNSPECIFIED"
    },
    "v1ProjectType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "iconId": {
          "type": "string"
        },
        "compatibleLanguages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Project type"
    },
    "v1ProjectTypeCategory": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "types": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProjectType"
          }
        }
      },
      "title": "Project type category"
    },
    "v1PublishReleaseContainerRequest": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "imageId": {
          "type": "string"
        },
        "registryUrl": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Request message for PublishReleaseContainer"
    },
    "v1PublishReleaseContainerResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "registryPath": {
          "type": "string"
        },
        "publishedTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Response message for PublishReleaseContainer"
    },
    "v1Question": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "purpose": {
          "type": "string",
          "title": "For agent understanding, not shown to user"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "title": "1-5 scale, 1 being highest priority"
        },
        "required": {
          "type": "boolean",
          "title": "Whether this question must be answered"
        },
        "followUps": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "IDs of follow-up questions"
        },
        "validation": {
          "type": "string",
          "title": "Validation pattern if applicable"
        },
        "defaultAnswer": {
          "type": "string",
          "title": "Suggested default if applicable"
        }
      },
      "title": "Question"
    },
    "v1QuestionCategory": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "questions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Question"
          }
        }
      },
      "title": "Question category"
    },
    "v1QuestionCoverage": {
      "type": "object",
      "properties": {
        "questionId": {
          "type": "string",
          "title": "Question identifier"
        },
        "questionText": {
          "type": "string",
          "title": "Question text for reference"
        },
        "isAnswered": {
          "type": "boolean",
          "title": "Whether the question is answered by the documents"
        },
        "confidenceScore": {
          "type": "number",
          "format": "float",
          "title": "Confidence score (0.0 to 1.0)"
        },
        "evidenceText": {
          "type": "string",
          "title": "Extracted evidence text that answers the question"
        },
        "sourceDocuments": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Source documents that contain the answer"
        },
        "category": {
          "type": "string",
          "title": "Question category"
        },
        "isCritical": {
          "type": "boolean",
          "title": "Whether this is a critical question"
        }
      },
      "description": "QuestionCoverage indicates whether and how well a question is answered."
    },
    "v1RegenerateIndicesResponse": {
      "type": "object",
      "properties": {
        "taskIndexCount": {
          "type": "integer",
          "format": "int32"
        },
        "dependencyIndexCount": {
          "type": "integer",
          "format": "int32"
        },
        "activityIndexCount": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for RegenerateIndices"
    },
    "v1RegretFlag": {
      "type": "object",
      "properties": {
        "taskId": {
          "type": "string"
        },
        "violationType": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "impact": {
          "type": "string"
        },
        "remediation": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "agentId": {
          "type": "string"
        }
      },
      "title": "RegretFlag represents a flag for implementation regrets"
    },
    "v1ReleaseInfo": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "title": "\"current\", \"next\", \"future\", \"past\""
        },
        "stats": {
          "$ref": "#/definitions/v1ReleaseStats"
        },
        "targetDate": {
          "type": "string"
        },
        "featureCount": {
          "type": "integer",
          "format": "int32"
        },
        "bugFixCount": {
          "type": "integer",
          "format": "int32"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
      },
      "title": "ReleaseInfo contains information about a release"
    },
    "v1ReleaseProgress": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "overallProgress": {
          "type": "number",
          "format": "float"
        },
        "stats": {
          "$ref": "#/definitions/v1ReleaseStats"
        },
        "personaProgress": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PersonaProgress"
          }
        },
        "velocity": {
          "$ref": "#/definitions/v1VelocityMetrics"
        },
        "blockedTasks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockedTaskInfo"
          }
        },
        "estimatedCompletionDate": {
          "type": "string"
        },
        "lastUpdated": {
          "type": "string"
        }
      },
      "title": "ReleaseProgress contains detailed progress metrics for a release"
    },
    "v1ReleaseStats": {
      "type": "object",
      "properties": {
        "totalTasks": {
          "type": "integer",
          "format": "int32"
        },
        "todoTasks": {
          "type": "integer",
          "format": "int32"
        },
        "inProgressTasks": {
          "type": "integer",
          "format": "int32"
        },
        "inReviewTasks": {
          "type": "integer",
          "format": "int32"
        },
        "completedTasks": {
          "type": "integer",
          "format": "int32"
        },
        "blockedTasks": {
          "type": "integer",
          "format": "int32"
        },
        "flaggedTasks": {
          "type": "integer",
          "format": "int32"
        },
        "completionPercentage": {
          "type": "number",
          "format": "float"
        }
      },
      "title": "ReleaseStats contains task statistics for a release"
    },
    "v1ReleaseSummary": {
      "type": "object",
      "properties": {
        "currentRelease": {
          "type": "string"
        },
        "totalReleases": {
          "type": "integer",
          "format": "int32"
        },
        "activeReleases": {
          "type": "integer",
          "format": "int32"
        },
        "completedReleases": {
          "type": "integer",
          "format": "int32"
        },
        "averageCompletion": {
          "type": "number",
          "format": "double"
        }
      },
      "title": "Release summary statistics"
    },
    "v1RemoveDependencyResponse": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/v1Task"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for RemoveDependency"
    },
    "v1RepairProjectStructureResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "itemsRepaired": {
          "type": "integer",
          "format": "int32"
        },
        "repairedPaths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "validationReport": {
          "$ref": "#/definitions/v1ValidationReport",
          "title": "Post-repair validation"
        }
      },
      "title": "Response message for RepairProjectStructure"
    },
    "v1RequestStatus": {
      "type": "string",
      "enum": [
        "REQUEST_STATUS_UNSPECIFIED",
        "REQUESTED",
        "REVIEWING",
        "COMPLETED",
        "PROCESSED"
      ],
      "default": "REQUEST_STATUS_UNSPECIFIED",
      "description": "- REQUESTED: Initial state when request is created\n - REVIEWING: Request is being reviewed/worked on\n - COMPLETED: Request work is complete, deliverables submitted\n - PROCESSED: Request has been processed and incorporated",
      "title": "RequestStatus defines the four-state lifecycle for external requests"
    },
    "v1RequirementRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1RequestStatus"
        },
        "analystId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "deliverableFiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "RequirementRequest represents an external requirement gathering request"
    },
    "v1ResearchRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1RequestStatus"
        },
        "researcherId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "deliverableFiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "ResearchRequest represents an external research request"
    },
    "v1ResolveTaskRegretResponse": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/v1Task"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for ResolveTaskRegret"
    },
    "v1ResponseStatus": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "error": {
          "$ref": "#/definitions/v1Error"
        }
      },
      "title": "Common response fields included in many responses"
    },
    "v1ScaffoldProjectRequest": {
      "type": "object",
      "properties": {
        "projectName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "initialVersion": {
          "type": "string"
        }
      },
      "title": "Request message for ScaffoldProject"
    },
    "v1ScaffoldProjectResponse": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "projectPath": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for ScaffoldProject"
    },
    "v1ScaffoldTaskRequest": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "persona": {
          "type": "string"
        },
        "definition": {
          "type": "string"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Request message for ScaffoldTask"
    },
    "v1ScaffoldTaskResponse": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/v1Task"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for ScaffoldTask"
    },
    "v1SimulationInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "title": "\"passed\", \"failed\", \"running\", \"pending\""
        },
        "lastRun": {
          "type": "string",
          "title": "Timestamp of last run"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "result": {
          "$ref": "#/definitions/v1SimulationResult"
        }
      },
      "title": "SimulationInfo describes a simulation"
    },
    "v1SimulationResult": {
      "type": "object",
      "properties": {
        "passed": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "metrics": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Key-value metrics from the simulation"
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "durationSeconds": {
          "type": "number",
          "format": "float"
        }
      },
      "title": "SimulationResult contains the outcome of a simulation run"
    },
    "v1SimulationRun": {
      "type": "object",
      "properties": {
        "runId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/v1SimulationResult"
        },
        "trigger": {
          "type": "string",
          "title": "\"manual\", \"scheduled\", \"pre-release\""
        }
      },
      "title": "SimulationRun represents a single historical run of a simulation"
    },
    "v1SimulationStatistics": {
      "type": "object",
      "properties": {
        "totalRuns": {
          "type": "integer",
          "format": "int32"
        },
        "passCount": {
          "type": "integer",
          "format": "int32"
        },
        "failCount": {
          "type": "integer",
          "format": "int32"
        },
        "averageDurationSeconds": {
          "type": "number",
          "format": "float"
        },
        "passRate": {
          "type": "number",
          "format": "float"
        },
        "firstRun": {
          "type": "string"
        },
        "lastRun": {
          "type": "string"
        },
        "commonFailureReasons": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "SimulationStatistics provides historical statistics for a simulation"
    },
    "v1SimulationSummary": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "passed": {
          "type": "integer",
          "format": "int32"
        },
        "failed": {
          "type": "integer",
          "format": "int32"
        },
        "running": {
          "type": "integer",
          "format": "int32"
        },
        "passRate": {
          "type": "number",
          "format": "float"
        },
        "lastRunTimestamp": {
          "type": "string"
        }
      },
      "title": "SimulationSummary provides aggregate statistics"
    },
    "v1StoreProjectAnswersResponse": {
      "type": "object",
      "properties": {
        "storedCount": {
          "type": "integer",
          "format": "int32"
        },
        "validationErrors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for StoreProjectAnswers"
    },
    "v1SubmitAuditResultsResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "auditRequest": {
          "$ref": "#/definitions/v1AuditRequest"
        },
        "uploadedFiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Response message for SubmitAuditResults"
    },
    "v1SubmitRequirementResultsResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "requirementRequest": {
          "$ref": "#/definitions/v1RequirementRequest"
        },
        "uploadedFiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Response message for SubmitRequirementResults"
    },
    "v1SubmitResearchResultsResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "researchRequest": {
          "$ref": "#/definitions/v1ResearchRequest"
        },
        "uploadedFiles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Response message for SubmitResearchResults"
    },
    "v1Task": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Core metadata"
        },
        "title": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "persona": {
          "type": "string"
        },
        "confidenceScore": {
          "type": "integer",
          "format": "int32"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "dependencies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Relationships"
        },
        "definition": {
          "type": "string",
          "title": "Content"
        },
        "acceptanceCriteria": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nextActions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "implementationNotes": {
          "type": "string"
        },
        "activityLog": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ActivityLogEntry"
          },
          "title": "Activity tracking"
        },
        "confidenceDetails": {
          "$ref": "#/definitions/v1ConfidenceScoreDetails",
          "description": "Detailed breakdown of confidence score",
          "title": "Enhanced workflow fields (added in v0.2.0)"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "title": "Explicit priority override (0-100)"
        },
        "blockers": {
          "type": "string",
          "title": "Description of what's blocking the task"
        },
        "startedAt": {
          "type": "string",
          "format": "date-time",
          "title": "When task first moved to in-progress"
        },
        "completedAt": {
          "type": "string",
          "format": "date-time",
          "title": "When task moved to completed status"
        },
        "estimatedEffort": {
          "type": "integer",
          "format": "int32",
          "title": "Estimated effort in story points"
        },
        "actualEffort": {
          "type": "integer",
          "format": "int32",
          "title": "Actual effort in story points"
        },
        "componentType": {
          "$ref": "#/definitions/v1ComponentType",
          "title": "Technical component type for UI categorization"
        }
      },
      "title": "Task represents a unit of work in the Forge system"
    },
    "v1TaskDistribution": {
      "type": "object",
      "properties": {
        "byStatus": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "title": "Count by status"
        },
        "byPersona": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "title": "Count by persona"
        },
        "byComponentType": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "title": "Count by component type"
        },
        "byPriority": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "title": "Count by priority"
        },
        "byConfidenceRange": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          },
          "title": "Count by confidence score ranges"
        }
      },
      "title": "TaskDistribution shows task distribution across dimensions"
    },
    "v1TaskStatusCounts": {
      "type": "object",
      "properties": {
        "todo": {
          "type": "integer",
          "format": "int32"
        },
        "inProgress": {
          "type": "integer",
          "format": "int32"
        },
        "inReview": {
          "type": "integer",
          "format": "int32"
        },
        "completed": {
          "type": "integer",
          "format": "int32"
        },
        "cancelled": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Task counts by status"
    },
    "v1TreeDirection": {
      "type": "string",
      "enum": [
        "TREE_DIRECTION_UNKNOWN",
        "TREE_DIRECTION_TOP_DOWN",
        "TREE_DIRECTION_BOTTOM_UP"
      ],
      "default": "TREE_DIRECTION_UNKNOWN",
      "description": "- TREE_DIRECTION_TOP_DOWN: Dependencies (what this task depends on)\n - TREE_DIRECTION_BOTTOM_UP: Dependents (what depends on this task)",
      "title": "TreeDirection specifies the direction of tree traversal"
    },
    "v1TreeMetadata": {
      "type": "object",
      "properties": {
        "totalNodes": {
          "type": "integer",
          "format": "int32",
          "title": "Total nodes in the tree"
        },
        "maxDepthReached": {
          "type": "integer",
          "format": "int32",
          "title": "Maximum depth actually reached"
        },
        "depthLimitExceeded": {
          "type": "boolean",
          "title": "Whether depth limit was hit"
        },
        "truncatedBranches": {
          "type": "integer",
          "format": "int32",
          "title": "Number of branches truncated by depth limit"
        },
        "cycleWarnings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Warnings about cycles detected"
        },
        "generatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "When the tree was generated"
        }
      },
      "title": "TreeMetadata provides information about the dependency tree"
    },
    "v1UnderstandProjectProgress": {
      "type": "object",
      "properties": {
        "currentStage": {
          "$ref": "#/definitions/UnderstandProjectProgressStage"
        },
        "percentComplete": {
          "type": "integer",
          "format": "int32"
        },
        "currentFile": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "insights": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Progress update message for UnderstandProject"
    },
    "v1UnderstandingProgress": {
      "type": "object",
      "properties": {
        "totalFiles": {
          "type": "integer",
          "format": "int32"
        },
        "analyzedFiles": {
          "type": "integer",
          "format": "int32"
        },
        "skippedFiles": {
          "type": "integer",
          "format": "int32"
        },
        "errorFiles": {
          "type": "integer",
          "format": "int32"
        },
        "currentFile": {
          "type": "string"
        },
        "stage": {
          "type": "string"
        },
        "startedAt": {
          "type": "string",
          "format": "date-time"
        },
        "estimatedCompletion": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Progress update during understanding process"
    },
    "v1UnderstandingStatus": {
      "type": "object",
      "properties": {
        "totalFiles": {
          "type": "integer",
          "format": "int32"
        },
        "analyzedFiles": {
          "type": "integer",
          "format": "int32"
        },
        "staleFiles": {
          "type": "integer",
          "format": "int32"
        },
        "errorFiles": {
          "type": "integer",
          "format": "int32"
        },
        "lastFullAnalysis": {
          "type": "string",
          "format": "date-time"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date-time"
        },
        "completionPercentage": {
          "type": "number",
          "format": "float"
        }
      },
      "title": "Understanding status"
    },
    "v1UnderstandingStrategy": {
      "type": "string",
      "enum": [
        "UNDERSTANDING_STRATEGY_UNSPECIFIED",
        "FORCE_ALL",
        "DIRTY_ONLY",
        "SMART"
      ],
      "default": "UNDERSTANDING_STRATEGY_UNSPECIFIED",
      "description": "- FORCE_ALL: Re-analyze every file regardless of state\n - DIRTY_ONLY: Only analyze files that have changed since last analysis\n - SMART: Auto-detect best approach based on project state",
      "title": "Understanding strategy for how to analyze files"
    },
    "v1UpdateAgentContextResponse": {
      "type": "object",
      "properties": {
        "context": {
          "$ref": "#/definitions/v1AgentContext"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for UpdateAgentContext"
    },
    "v1UpdateAuditStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "auditRequest": {
          "$ref": "#/definitions/v1AuditRequest"
        }
      },
      "title": "Response message for UpdateAuditStatus"
    },
    "v1UpdateConfidenceScoreResponse": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/v1Task"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for UpdateConfidenceScore"
    },
    "v1UpdateFeatureResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "feature": {
          "$ref": "#/definitions/v1Feature"
        }
      }
    },
    "v1UpdateProjectInfoRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "title": "Request message for UpdateProjectInfo"
    },
    "v1UpdateProjectInfoResponse": {
      "type": "object",
      "properties": {
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for UpdateProjectInfo"
    },
    "v1UpdateProjectMetadataRequest": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ProjectMetadata"
        }
      },
      "title": "Request message for UpdateProjectMetadata"
    },
    "v1UpdateProjectMetadataResponse": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for UpdateProjectMetadata"
    },
    "v1UpdateProjectResponse": {
      "type": "object",
      "properties": {
        "project": {
          "$ref": "#/definitions/v1Project"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for UpdateProject"
    },
    "v1UpdateRequirementStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "requirementRequest": {
          "$ref": "#/definitions/v1RequirementRequest"
        }
      },
      "title": "Response message for UpdateRequirementStatus"
    },
    "v1UpdateResearchStatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "researchRequest": {
          "$ref": "#/definitions/v1ResearchRequest"
        }
      },
      "title": "Response message for UpdateResearchStatus"
    },
    "v1UpdateTaskResponse": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/v1Task"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for UpdateTask"
    },
    "v1ValidateProjectStructureResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "report": {
          "$ref": "#/definitions/v1ValidationReport"
        }
      },
      "title": "Response message for ValidateProjectStructure"
    },
    "v1ValidateReleaseContainerRequest": {
      "type": "object",
      "properties": {
        "projectId": {
          "type": "string"
        },
        "imageId": {
          "type": "string"
        },
        "validationChecks": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Request message for ValidateReleaseContainer"
    },
    "v1ValidateReleaseContainerResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        },
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ValidationResult"
          }
        }
      },
      "title": "Response message for ValidateReleaseContainer"
    },
    "v1ValidateTaskTransitionResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1ResponseStatus"
        }
      },
      "title": "Response message for ValidateTaskTransition"
    },
    "v1ValidationItem": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "title": "\"directory\" or \"file\""
        },
        "required": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "error": {
          "type": "string"
        }
      },
      "title": "ValidationItem represents a missing or invalid item"
    },
    "v1ValidationReport": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        },
        "projectId": {
          "type": "string"
        },
        "projectPath": {
          "type": "string"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "missingItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ValidationItem"
          }
        },
        "invalidItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ValidationItem"
          }
        },
        "warnings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "repairSuggestions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "summary": {
          "type": "string"
        }
      },
      "title": "ValidationReport contains the results of project structure validation"
    },
    "v1ValidationResult": {
      "type": "object",
      "properties": {
        "checkName": {
          "type": "string"
        },
        "passed": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "severity": {
          "type": "string"
        }
      },
      "title": "ValidationResult describes a validation check result"
    },
    "v1VelocityMetrics": {
      "type": "object",
      "properties": {
        "dailyVelocity": {
          "type": "number",
          "format": "float",
          "title": "Tasks completed per day"
        },
        "weeklyVelocity": {
          "type": "number",
          "format": "float",
          "title": "Tasks completed per week"
        },
        "daysElapsed": {
          "type": "integer",
          "format": "int32"
        },
        "estimatedDaysRemaining": {
          "type": "integer",
          "format": "int32"
        },
        "burndownData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BurndownPoint"
          }
        }
      },
      "title": "VelocityMetrics contains velocity and burndown data"
    }
  }
}
